# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkflowInstancesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_workflow_instance_resource_cancel_workflow_instances_post(self, workflow_instance_id, **kwargs):  # noqa: E501
        """Cancels the workflow instance identified by the given.  # noqa: E501

        Cancels the workflow instance identified by the given <code>id</code> with provided reason. Please be aware that cancelling a workflow, leaves possible parent workflow instances running, if you want them also to be cleaned up, you will have to cancel them explicitly.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_cancel_workflow_instances_post(workflow_instance_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_instance_id: the <code>id</code> of the workflow instance to be cancelled (required)
        :param str body: the reason for the cancellation of the workflow instance
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_instance_resource_cancel_workflow_instances_post_with_http_info(workflow_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_instance_resource_cancel_workflow_instances_post_with_http_info(workflow_instance_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_instance_resource_cancel_workflow_instances_post_with_http_info(self, workflow_instance_id, **kwargs):  # noqa: E501
        """Cancels the workflow instance identified by the given.  # noqa: E501

        Cancels the workflow instance identified by the given <code>id</code> with provided reason. Please be aware that cancelling a workflow, leaves possible parent workflow instances running, if you want them also to be cleaned up, you will have to cancel them explicitly.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_cancel_workflow_instances_post_with_http_info(workflow_instance_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_instance_id: the <code>id</code> of the workflow instance to be cancelled (required)
        :param str body: the reason for the cancellation of the workflow instance
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_instance_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_instance_resource_cancel_workflow_instances_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_instance_id' is set
        if ('workflow_instance_id' not in params or
                params['workflow_instance_id'] is None):
            raise ValueError("Missing the required parameter `workflow_instance_id` when calling `resource_workflow_instance_resource_cancel_workflow_instances_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_instance_id' in params:
            path_params['workflowInstanceId'] = params['workflow_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowInstances/{workflowInstanceId}/canceled', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_instance_resource_find_workflow_instances_get(self, **kwargs):  # noqa: E501
        """Returns workflow instances matching given search criteria.  # noqa: E501

        Returns workflow instances matching given search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_find_workflow_instances_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str business_item_name: The name of the business item that should be contained by the searched workflows
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :param str sort_field: The field on which the results are sorted
        :param str sort_order: The sorting order
        :param str workflow_definition_id: The <code>id</code> of the workflow definition
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_instance_resource_find_workflow_instances_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_instance_resource_find_workflow_instances_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_workflow_instance_resource_find_workflow_instances_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns workflow instances matching given search criteria.  # noqa: E501

        Returns workflow instances matching given search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_find_workflow_instances_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str business_item_name: The name of the business item that should be contained by the searched workflows
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :param str sort_field: The field on which the results are sorted
        :param str sort_order: The sorting order
        :param str workflow_definition_id: The <code>id</code> of the workflow definition
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_item_name', 'limit', 'offset', 'sort_field', 'sort_order', 'workflow_definition_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_instance_resource_find_workflow_instances_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'business_item_name' in params:
            query_params.append(('businessItemName', params['business_item_name']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'workflow_definition_id' in params:
            query_params.append(('workflowDefinitionId', params['workflow_definition_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowInstances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_instance_resource_get_workflow_instance_diagram_get(self, workflow_instance_id, **kwargs):  # noqa: E501
        """Returns the file representing the diagram of workflow instance identified by the given id.  # noqa: E501

        Returns the file representing the diagram of workflow instance identified by the given id. The diagram input stream returned can be null as deployed workflow defintions without graphical notation included don't have a diagram.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_get_workflow_instance_diagram_get(workflow_instance_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_instance_id: the <code>id</code> of the workflow instance to return the diagram for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_instance_resource_get_workflow_instance_diagram_get_with_http_info(workflow_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_instance_resource_get_workflow_instance_diagram_get_with_http_info(workflow_instance_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_instance_resource_get_workflow_instance_diagram_get_with_http_info(self, workflow_instance_id, **kwargs):  # noqa: E501
        """Returns the file representing the diagram of workflow instance identified by the given id.  # noqa: E501

        Returns the file representing the diagram of workflow instance identified by the given id. The diagram input stream returned can be null as deployed workflow defintions without graphical notation included don't have a diagram.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_get_workflow_instance_diagram_get_with_http_info(workflow_instance_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_instance_id: the <code>id</code> of the workflow instance to return the diagram for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_instance_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_instance_resource_get_workflow_instance_diagram_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_instance_id' is set
        if ('workflow_instance_id' not in params or
                params['workflow_instance_id'] is None):
            raise ValueError("Missing the required parameter `workflow_instance_id` when calling `resource_workflow_instance_resource_get_workflow_instance_diagram_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_instance_id' in params:
            path_params['workflowInstanceId'] = params['workflow_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowInstances/{workflowInstanceId}/diagram', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_instance_resource_message_event_received_post(self, message_name, process_instance_id, **kwargs):  # noqa: E501
        """Passes the message event to the workflow engine.  # noqa: E501

        Passes the message event to the workflow engine. It will pass on this specific event to the engine with the given name, process instance and variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_message_event_received_post(message_name, process_instance_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str message_name: the name of the message to trigger (required)
        :param str process_instance_id: the id of an instance of a process. Given process instance should have only one execution running at the time. Otherwise this method will fail. (required)
        :param JsonMessageEventReceivedRequest body: the properties of the message event
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_instance_resource_message_event_received_post_with_http_info(message_name, process_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_instance_resource_message_event_received_post_with_http_info(message_name, process_instance_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_instance_resource_message_event_received_post_with_http_info(self, message_name, process_instance_id, **kwargs):  # noqa: E501
        """Passes the message event to the workflow engine.  # noqa: E501

        Passes the message event to the workflow engine. It will pass on this specific event to the engine with the given name, process instance and variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_message_event_received_post_with_http_info(message_name, process_instance_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str message_name: the name of the message to trigger (required)
        :param str process_instance_id: the id of an instance of a process. Given process instance should have only one execution running at the time. Otherwise this method will fail. (required)
        :param JsonMessageEventReceivedRequest body: the properties of the message event
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message_name', 'process_instance_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_instance_resource_message_event_received_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'message_name' is set
        if ('message_name' not in params or
                params['message_name'] is None):
            raise ValueError("Missing the required parameter `message_name` when calling `resource_workflow_instance_resource_message_event_received_post`")  # noqa: E501
        # verify the required parameter 'process_instance_id' is set
        if ('process_instance_id' not in params or
                params['process_instance_id'] is None):
            raise ValueError("Missing the required parameter `process_instance_id` when calling `resource_workflow_instance_resource_message_event_received_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'message_name' in params:
            path_params['messageName'] = params['message_name']  # noqa: E501
        if 'process_instance_id' in params:
            path_params['processInstanceId'] = params['process_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowInstances/{processInstanceId}/messageEvents/{messageName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_instance_resource_start_workflow_instances_in_job_post(self, **kwargs):  # noqa: E501
        """Starts workflow instances in job basing on the provided request.  # noqa: E501

        Starts workflow instances in job basing on the provided request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_start_workflow_instances_in_job_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonStartWorkflowInstancesRequest body: the properties of the workflows to be started
        :return: JsonJobImplImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_instance_resource_start_workflow_instances_in_job_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_instance_resource_start_workflow_instances_in_job_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_workflow_instance_resource_start_workflow_instances_in_job_post_with_http_info(self, **kwargs):  # noqa: E501
        """Starts workflow instances in job basing on the provided request.  # noqa: E501

        Starts workflow instances in job basing on the provided request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_start_workflow_instances_in_job_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonStartWorkflowInstancesRequest body: the properties of the workflows to be started
        :return: JsonJobImplImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_instance_resource_start_workflow_instances_in_job_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowInstances/startJobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonJobImplImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_instance_resource_start_workflow_instances_post(self, **kwargs):  # noqa: E501
        """Starts multiple workflow instances basing on the provided request.  # noqa: E501

        Starts multiple workflow instances basing on the provided request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_start_workflow_instances_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonStartWorkflowInstancesRequest body: the properties of the workflows to be started
        :return: list[JsonWorkflowInstanceImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_instance_resource_start_workflow_instances_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_instance_resource_start_workflow_instances_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_workflow_instance_resource_start_workflow_instances_post_with_http_info(self, **kwargs):  # noqa: E501
        """Starts multiple workflow instances basing on the provided request.  # noqa: E501

        Starts multiple workflow instances basing on the provided request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_instance_resource_start_workflow_instances_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonStartWorkflowInstancesRequest body: the properties of the workflows to be started
        :return: list[JsonWorkflowInstanceImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_instance_resource_start_workflow_instances_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JsonWorkflowInstanceImpl]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
