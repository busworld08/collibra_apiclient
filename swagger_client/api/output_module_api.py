# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OutputModuleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_output_module_resource_export_csv_in_job_post(self, **kwargs):  # noqa: E501
        """Starts a job that performs an Output Module query and stores the results in a file in CSV format.  # noqa: E501

        Starts a job that performs an Output Module query and stores the results in a file in CSV format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_csv_in_job_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param str escape: The delimiter character used to escape separator or quote character. Default value is '\\\\'
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param str quote: The delimiter character used for quoted entries. Default value  is '\"'
        :param bool send_notification: Whether an e-mail must be sent on completion of the job
        :param str separator: The delimiter character used to separate entries. Default value is ';'
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_csv_in_job_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_csv_in_job_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_csv_in_job_post_with_http_info(self, **kwargs):  # noqa: E501
        """Starts a job that performs an Output Module query and stores the results in a file in CSV format.  # noqa: E501

        Starts a job that performs an Output Module query and stores the results in a file in CSV format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_csv_in_job_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str escape: The delimiter character used to escape separator or quote character. Default value is '\\\\'
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param str quote: The delimiter character used for quoted entries. Default value  is '\"'
        :param bool send_notification: Whether an e-mail must be sent on completion of the job
        :param str separator: The delimiter character used to separate entries. Default value is ';'
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['escape', 'file_name', 'header_row', 'quote', 'send_notification', 'separator', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_csv_in_job_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'escape' in params:
            query_params.append(('escape', params['escape']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'header_row' in params:
            query_params.append(('headerRow', params['header_row']))  # noqa: E501
        if 'quote' in params:
            query_params.append(('quote', params['quote']))  # noqa: E501
        if 'send_notification' in params:
            query_params.append(('sendNotification', params['send_notification']))  # noqa: E501
        if 'separator' in params:
            query_params.append(('separator', params['separator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/csv-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_csv_to_file_post(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and stores the query results in a file in CSV format.  # noqa: E501

        Performs an Output Module query and stores the query results in a file in CSV format. The id of the file is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_csv_to_file_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param str escape: The delimiter character used to escape separator or quote character. Default value is '\\\\'
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param str quote: The delimiter character used for quoted entries. Default value  is '\"'
        :param str separator: The delimiter character used to separate entries. Default value is ';'
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_csv_to_file_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_csv_to_file_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_csv_to_file_post_with_http_info(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and stores the query results in a file in CSV format.  # noqa: E501

        Performs an Output Module query and stores the query results in a file in CSV format. The id of the file is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_csv_to_file_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str escape: The delimiter character used to escape separator or quote character. Default value is '\\\\'
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param str quote: The delimiter character used for quoted entries. Default value  is '\"'
        :param str separator: The delimiter character used to separate entries. Default value is ';'
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['escape', 'file_name', 'header_row', 'quote', 'separator', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_csv_to_file_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'escape' in params:
            query_params.append(('escape', params['escape']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'header_row' in params:
            query_params.append(('headerRow', params['header_row']))  # noqa: E501
        if 'quote' in params:
            query_params.append(('quote', params['quote']))  # noqa: E501
        if 'separator' in params:
            query_params.append(('separator', params['separator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/csv-file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_csvpost(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and exports the returns results immediately in CSV format.  # noqa: E501

        Performs an Output Module query and exports the returns results immediately in CSV format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_csvpost(async=True)
        >>> result = thread.get()

        :param async bool
        :param str escape: The delimiter character used to escape separator or quote character. Default value is '\\\\'
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param str quote: The delimiter character used for quoted entries. Default value  is '\"'
        :param str separator: The delimiter character used to separate entries. Default value is ';'
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_csvpost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_csvpost_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_csvpost_with_http_info(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and exports the returns results immediately in CSV format.  # noqa: E501

        Performs an Output Module query and exports the returns results immediately in CSV format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_csvpost_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str escape: The delimiter character used to escape separator or quote character. Default value is '\\\\'
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param str quote: The delimiter character used for quoted entries. Default value  is '\"'
        :param str separator: The delimiter character used to separate entries. Default value is ';'
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['escape', 'header_row', 'quote', 'separator', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_csvpost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'escape' in params:
            query_params.append(('escape', params['escape']))  # noqa: E501
        if 'header_row' in params:
            query_params.append(('headerRow', params['header_row']))  # noqa: E501
        if 'quote' in params:
            query_params.append(('quote', params['quote']))  # noqa: E501
        if 'separator' in params:
            query_params.append(('separator', params['separator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_excel_in_job_post(self, **kwargs):  # noqa: E501
        """Starts a job that performs an Output Module query and stores the results in a file in Excel format.  # noqa: E501

        Starts a job that performs an Output Module query and stores the results in a file in Excel format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_excel_in_job_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param bool send_notification: Whether an e-mail must be sent on completion of the job
        :param str sheet_name: The name of the sheet. By default no sheet name is set
        :param bool use_xlsx: Whether the Excel file to export will be '.xlsx' file (true) or a '.xls' file (false. Default value is true
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_excel_in_job_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_excel_in_job_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_excel_in_job_post_with_http_info(self, **kwargs):  # noqa: E501
        """Starts a job that performs an Output Module query and stores the results in a file in Excel format.  # noqa: E501

        Starts a job that performs an Output Module query and stores the results in a file in Excel format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_excel_in_job_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param bool send_notification: Whether an e-mail must be sent on completion of the job
        :param str sheet_name: The name of the sheet. By default no sheet name is set
        :param bool use_xlsx: Whether the Excel file to export will be '.xlsx' file (true) or a '.xls' file (false. Default value is true
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'header_row', 'send_notification', 'sheet_name', 'use_xlsx', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_excel_in_job_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'header_row' in params:
            query_params.append(('headerRow', params['header_row']))  # noqa: E501
        if 'send_notification' in params:
            query_params.append(('sendNotification', params['send_notification']))  # noqa: E501
        if 'sheet_name' in params:
            query_params.append(('sheetName', params['sheet_name']))  # noqa: E501
        if 'use_xlsx' in params:
            query_params.append(('useXLSX', params['use_xlsx']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/excel-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_excel_to_file_post(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and stores the query results in a file in Excel format.  # noqa: E501

        Performs an Output Module query and stores the query results in a file in Excel format. The id of the file is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_excel_to_file_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param str sheet_name: The name of the sheet. By default no sheet name is set
        :param bool use_xlsx: Whether the Excel file to export will be '.xlsx' file (true) or a '.xls' file (false. Default value is true
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_excel_to_file_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_excel_to_file_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_excel_to_file_post_with_http_info(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and stores the query results in a file in Excel format.  # noqa: E501

        Performs an Output Module query and stores the query results in a file in Excel format. The id of the file is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_excel_to_file_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool header_row: Whether a response should include a header (true) or not (false). Default value is true
        :param str sheet_name: The name of the sheet. By default no sheet name is set
        :param bool use_xlsx: Whether the Excel file to export will be '.xlsx' file (true) or a '.xls' file (false. Default value is true
        :param str body: the JSON representation of Table View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'header_row', 'sheet_name', 'use_xlsx', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_excel_to_file_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'header_row' in params:
            query_params.append(('headerRow', params['header_row']))  # noqa: E501
        if 'sheet_name' in params:
            query_params.append(('sheetName', params['sheet_name']))  # noqa: E501
        if 'use_xlsx' in params:
            query_params.append(('useXLSX', params['use_xlsx']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/excel-file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_json_in_job_post(self, **kwargs):  # noqa: E501
        """Starts a job that performs an Output Module query and stores the results in a file in JSON format.  # noqa: E501

        Starts a job that performs an Output Module query and stores the results in a file in JSON format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_json_in_job_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool send_notification: Whether an e-mail must be sent on completion of the job
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_json_in_job_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_json_in_job_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_json_in_job_post_with_http_info(self, **kwargs):  # noqa: E501
        """Starts a job that performs an Output Module query and stores the results in a file in JSON format.  # noqa: E501

        Starts a job that performs an Output Module query and stores the results in a file in JSON format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_json_in_job_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param bool send_notification: Whether an e-mail must be sent on completion of the job
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'send_notification', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_json_in_job_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'send_notification' in params:
            query_params.append(('sendNotification', params['send_notification']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/json-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_json_to_file_post(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and stores the query results in a file in JSON format.  # noqa: E501

        Performs an Output Module query and stores the query results in a file in JSON format. The id of the file is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_json_to_file_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_json_to_file_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_json_to_file_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_json_to_file_post_with_http_info(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and stores the query results in a file in JSON format.  # noqa: E501

        Performs an Output Module query and stores the query results in a file in JSON format. The id of the file is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_json_to_file_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_json_to_file_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/json-file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_jsonpost(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and exports the returns results immediately in JSON format.  # noqa: E501

        Performs an Output Module query and exports the returns results immediately in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_jsonpost(async=True)
        >>> result = thread.get()

        :param async bool
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_jsonpost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_jsonpost_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_jsonpost_with_http_info(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and exports the returns results immediately in JSON format.  # noqa: E501

        Performs an Output Module query and exports the returns results immediately in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_jsonpost_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_jsonpost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_xml_in_job_post(self, **kwargs):  # noqa: E501
        """Starts a job that performs an Output Module query and stores the results in a file in XML format.  # noqa: E501

        Starts a job that performs an Output Module query and stores the results in a file in XML format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_xml_in_job_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param str body: the XML representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_xml_in_job_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_xml_in_job_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_xml_in_job_post_with_http_info(self, **kwargs):  # noqa: E501
        """Starts a job that performs an Output Module query and stores the results in a file in XML format.  # noqa: E501

        Starts a job that performs an Output Module query and stores the results in a file in XML format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_xml_in_job_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param str body: the XML representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_xml_in_job_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/xml-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_xml_to_file_post(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and stores the query results in a file in XML format.  # noqa: E501

        Performs an Output Module query and stores the query results in a file in XML format. The id of the file is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_xml_to_file_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_xml_to_file_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_xml_to_file_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_xml_to_file_post_with_http_info(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and stores the query results in a file in XML format.  # noqa: E501

        Performs an Output Module query and stores the query results in a file in XML format. The id of the file is returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_xml_to_file_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str file_name: The name of the file. By default the file name will be generated
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_xml_to_file_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/xml-file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_export_xmlpost(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and exports the returns results immediately in XML format.  # noqa: E501

        Performs an Output Module query and exports the returns results immediately in XML format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_xmlpost(async=True)
        >>> result = thread.get()

        :param async bool
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_export_xmlpost_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_export_xmlpost_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_export_xmlpost_with_http_info(self, **kwargs):  # noqa: E501
        """Performs an Output Module query and exports the returns results immediately in XML format.  # noqa: E501

        Performs an Output Module query and exports the returns results immediately in XML format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_export_xmlpost_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str body: the JSON representation of View Config that describes the query to be performed. Refer to Output Module documentation for more details
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_export_xmlpost" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/export/xml', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_output_module_resource_get_table_view_config_by_view_id_get(self, view_id, **kwargs):  # noqa: E501
        """.  # noqa: E501

        <b>EXPERIMENTAL</b> Returns Table View Config based on id of given View and its Location. This Table View Config can be used by Output Module to export the same data as visible in Collibra Data Governance Center User Interface. Example: given page under url https://dgc.collibra.com/glossary?view=133f7f30-033c-4e38-acc2-2c1ac599d19e the view <code>id</code> is <code>133f7f30-033c-4e38-acc2-2c1ac599d19e</code>. The Location represents a location of given View in Collibra Data Governance Center.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_get_table_view_config_by_view_id_get(view_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str view_id: the <code>id</code> of given View. Can be obtained from Collibra Data Governance Center User Interface (required)
        :param str view_location: The Location of the view. Views in Collibra Data Governance Center are available under specific locations. Setting appropriate View Location will produce Table View Config that returns identical data as seen under desired location and given View. Each location is associated with set of filters that are automatically applied to given view. If this field is not defined then returned Table View Config corresponds to a generic View which where no additional filters are applied. Because of that the data returned when generic Table View Config is used may differ from the data seen in given View in Collibra Data Governance Center User Interface.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_output_module_resource_get_table_view_config_by_view_id_get_with_http_info(view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_output_module_resource_get_table_view_config_by_view_id_get_with_http_info(view_id, **kwargs)  # noqa: E501
            return data

    def resource_output_module_resource_get_table_view_config_by_view_id_get_with_http_info(self, view_id, **kwargs):  # noqa: E501
        """.  # noqa: E501

        <b>EXPERIMENTAL</b> Returns Table View Config based on id of given View and its Location. This Table View Config can be used by Output Module to export the same data as visible in Collibra Data Governance Center User Interface. Example: given page under url https://dgc.collibra.com/glossary?view=133f7f30-033c-4e38-acc2-2c1ac599d19e the view <code>id</code> is <code>133f7f30-033c-4e38-acc2-2c1ac599d19e</code>. The Location represents a location of given View in Collibra Data Governance Center.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_output_module_resource_get_table_view_config_by_view_id_get_with_http_info(view_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str view_id: the <code>id</code> of given View. Can be obtained from Collibra Data Governance Center User Interface (required)
        :param str view_location: The Location of the view. Views in Collibra Data Governance Center are available under specific locations. Setting appropriate View Location will produce Table View Config that returns identical data as seen under desired location and given View. Each location is associated with set of filters that are automatically applied to given view. If this field is not defined then returned Table View Config corresponds to a generic View which where no additional filters are applied. Because of that the data returned when generic Table View Config is used may differ from the data seen in given View in Collibra Data Governance Center User Interface.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['view_id', 'view_location']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_output_module_resource_get_table_view_config_by_view_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `resource_output_module_resource_get_table_view_config_by_view_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['viewId'] = params['view_id']  # noqa: E501

        query_params = []
        if 'view_location' in params:
            query_params.append(('viewLocation', params['view_location']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/outputModule/tableViewConfigs/viewId/{viewId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
