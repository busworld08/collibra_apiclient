# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CommentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_comment_resource_add_comment_post(self, **kwargs):  # noqa: E501
        """Adds new comment.  # noqa: E501

        Adds new comment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_add_comment_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonAddCommentRequest body: the properties of the comment to be added
        :return: JsonCommentImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_comment_resource_add_comment_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_comment_resource_add_comment_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_comment_resource_add_comment_post_with_http_info(self, **kwargs):  # noqa: E501
        """Adds new comment.  # noqa: E501

        Adds new comment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_add_comment_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonAddCommentRequest body: the properties of the comment to be added
        :return: JsonCommentImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_comment_resource_add_comment_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonCommentImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_comment_resource_change_comment_patch(self, comment_id, **kwargs):  # noqa: E501
        """Changes the comment with the information that is present in the request.  # noqa: E501

        Changes the comment with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_change_comment_patch(comment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comment_id: the <code>id</code> of the comment to be changed (required)
        :param JsonChangeCommentRequest body: the properties of the comment to be changed
        :return: JsonCommentImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_comment_resource_change_comment_patch_with_http_info(comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_comment_resource_change_comment_patch_with_http_info(comment_id, **kwargs)  # noqa: E501
            return data

    def resource_comment_resource_change_comment_patch_with_http_info(self, comment_id, **kwargs):  # noqa: E501
        """Changes the comment with the information that is present in the request.  # noqa: E501

        Changes the comment with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_change_comment_patch_with_http_info(comment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comment_id: the <code>id</code> of the comment to be changed (required)
        :param JsonChangeCommentRequest body: the properties of the comment to be changed
        :return: JsonCommentImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_comment_resource_change_comment_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `resource_comment_resource_change_comment_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/comments/{commentId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonCommentImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_comment_resource_find_comments_get(self, **kwargs):  # noqa: E501
        """Returns comments matching the given search criteria.  # noqa: E501

        Returns comments matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned comments satisfy all constraints that are specified in this search criteria. By default a result containing 1000 comments is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_find_comments_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str base_resource_id: The <code>id</code> of the resource which the searched comments refer to
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :param str parent_id: The <code>id</code> of the comment which the reply comments should be searched for
        :param bool root_comment: Whether the searched comments should be root comments (not reply comments)
        :param str sort_order: The order of sorting on the date the comment was created
        :param str user_id: The <code>id</code> of the user who created the comment
        :return: JsonCommentImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_comment_resource_find_comments_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_comment_resource_find_comments_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_comment_resource_find_comments_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns comments matching the given search criteria.  # noqa: E501

        Returns comments matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned comments satisfy all constraints that are specified in this search criteria. By default a result containing 1000 comments is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_find_comments_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str base_resource_id: The <code>id</code> of the resource which the searched comments refer to
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :param str parent_id: The <code>id</code> of the comment which the reply comments should be searched for
        :param bool root_comment: Whether the searched comments should be root comments (not reply comments)
        :param str sort_order: The order of sorting on the date the comment was created
        :param str user_id: The <code>id</code> of the user who created the comment
        :return: JsonCommentImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['base_resource_id', 'limit', 'offset', 'parent_id', 'root_comment', 'sort_order', 'user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_comment_resource_find_comments_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'base_resource_id' in params:
            query_params.append(('baseResourceId', params['base_resource_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'root_comment' in params:
            query_params.append(('rootComment', params['root_comment']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonCommentImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_comment_resource_get_comment_get(self, comment_id, **kwargs):  # noqa: E501
        """Returns comment identified by given id.  # noqa: E501

        Returns comment identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_get_comment_get(comment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comment_id: the <code>id</code> of the comment (required)
        :return: JsonCommentImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_comment_resource_get_comment_get_with_http_info(comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_comment_resource_get_comment_get_with_http_info(comment_id, **kwargs)  # noqa: E501
            return data

    def resource_comment_resource_get_comment_get_with_http_info(self, comment_id, **kwargs):  # noqa: E501
        """Returns comment identified by given id.  # noqa: E501

        Returns comment identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_get_comment_get_with_http_info(comment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comment_id: the <code>id</code> of the comment (required)
        :return: JsonCommentImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_comment_resource_get_comment_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `resource_comment_resource_get_comment_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/comments/{commentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonCommentImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_comment_resource_remove_comment_delete(self, comment_id, **kwargs):  # noqa: E501
        """Removes comment identified by given id.  # noqa: E501

        Removes comment identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_remove_comment_delete(comment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comment_id: the <code>id</code> of the comment to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_comment_resource_remove_comment_delete_with_http_info(comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_comment_resource_remove_comment_delete_with_http_info(comment_id, **kwargs)  # noqa: E501
            return data

    def resource_comment_resource_remove_comment_delete_with_http_info(self, comment_id, **kwargs):  # noqa: E501
        """Removes comment identified by given id.  # noqa: E501

        Removes comment identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_comment_resource_remove_comment_delete_with_http_info(comment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str comment_id: the <code>id</code> of the comment to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['comment_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_comment_resource_remove_comment_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'comment_id' is set
        if ('comment_id' not in params or
                params['comment_id'] is None):
            raise ValueError("Missing the required parameter `comment_id` when calling `resource_comment_resource_remove_comment_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/comments/{commentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
