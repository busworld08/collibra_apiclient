# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkflowTasksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_workflow_task_resource_cancel_workflow_task_post(self, workflow_task_id, **kwargs):  # noqa: E501
        """Cancels the workflow task identified by the given id with provided reason.  # noqa: E501

        Cancels the workflow task identified by the given id with provided reason. If the given workflow is a subprocess, this method makes sure everything is cancelled from the root process instance. If the given task is not found, this method will assume it already was cancelled without throwing any error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_cancel_workflow_task_post(workflow_task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_task_id: the <code>id</code> of the workflow task to be cancelled (required)
        :param str body: the reason for the cancellation of the workflow instance
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_task_resource_cancel_workflow_task_post_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_task_resource_cancel_workflow_task_post_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_task_resource_cancel_workflow_task_post_with_http_info(self, workflow_task_id, **kwargs):  # noqa: E501
        """Cancels the workflow task identified by the given id with provided reason.  # noqa: E501

        Cancels the workflow task identified by the given id with provided reason. If the given workflow is a subprocess, this method makes sure everything is cancelled from the root process instance. If the given task is not found, this method will assume it already was cancelled without throwing any error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_cancel_workflow_task_post_with_http_info(workflow_task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_task_id: the <code>id</code> of the workflow task to be cancelled (required)
        :param str body: the reason for the cancellation of the workflow instance
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_task_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_task_resource_cancel_workflow_task_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_task_id' is set
        if ('workflow_task_id' not in params or
                params['workflow_task_id'] is None):
            raise ValueError("Missing the required parameter `workflow_task_id` when calling `resource_workflow_task_resource_cancel_workflow_task_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_task_id' in params:
            path_params['workflowTaskId'] = params['workflow_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks/{workflowTaskId}/canceled', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_task_resource_complete_workflow_tasks_post(self, **kwargs):  # noqa: E501
        """Completes and returns the workflow tasks basing on the provided request.  # noqa: E501

        Completes and returns the workflow tasks basing on the provided request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_complete_workflow_tasks_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonCompleteWorkflowTasksRequest body: the request describing the parameters for the workflow tasks to complete
        :return: list[JsonWorkflowTaskImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_task_resource_complete_workflow_tasks_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_task_resource_complete_workflow_tasks_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_workflow_task_resource_complete_workflow_tasks_post_with_http_info(self, **kwargs):  # noqa: E501
        """Completes and returns the workflow tasks basing on the provided request.  # noqa: E501

        Completes and returns the workflow tasks basing on the provided request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_complete_workflow_tasks_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonCompleteWorkflowTasksRequest body: the request describing the parameters for the workflow tasks to complete
        :return: list[JsonWorkflowTaskImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_task_resource_complete_workflow_tasks_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks/completed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JsonWorkflowTaskImpl]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_task_resource_find_workflow_tasks_get(self, **kwargs):  # noqa: E501
        """Returns the workflow tasks matching given search criteria.  # noqa: E501

        Returns the workflow tasks matching given search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_find_workflow_tasks_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str business_item_id: The <code>id</code> of the business item
        :param str business_item_name: The part of the name of the business item
        :param str business_item_type: The type of the business item
        :param float create_date: The creation date of the task. It is the timestamp (in UTC time standard)
        :param float due_date: The due date of the task. It is the timestamp (in UTC time standard)
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :param str sort_field: The field on which the results are sorted. On due date by default. For possible values see SortField
        :param str sort_order: The sorting order
        :param str title: The title/name of the task
        :param str type: The task type
        :param str user_id: The <code>id</code> of the user for which the tasks need to be returned. If empty, the current logged in user will be used
        :param str workflow_task_user_relation: The type of relation between user and searched tasks <p> This could be either set to search for all the tasks the user is permitted to view or just those assigned to the user.
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_task_resource_find_workflow_tasks_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_task_resource_find_workflow_tasks_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_workflow_task_resource_find_workflow_tasks_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the workflow tasks matching given search criteria.  # noqa: E501

        Returns the workflow tasks matching given search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_find_workflow_tasks_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str business_item_id: The <code>id</code> of the business item
        :param str business_item_name: The part of the name of the business item
        :param str business_item_type: The type of the business item
        :param float create_date: The creation date of the task. It is the timestamp (in UTC time standard)
        :param float due_date: The due date of the task. It is the timestamp (in UTC time standard)
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :param str sort_field: The field on which the results are sorted. On due date by default. For possible values see SortField
        :param str sort_order: The sorting order
        :param str title: The title/name of the task
        :param str type: The task type
        :param str user_id: The <code>id</code> of the user for which the tasks need to be returned. If empty, the current logged in user will be used
        :param str workflow_task_user_relation: The type of relation between user and searched tasks <p> This could be either set to search for all the tasks the user is permitted to view or just those assigned to the user.
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_item_id', 'business_item_name', 'business_item_type', 'create_date', 'due_date', 'limit', 'offset', 'sort_field', 'sort_order', 'title', 'type', 'user_id', 'workflow_task_user_relation']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_task_resource_find_workflow_tasks_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'business_item_id' in params:
            query_params.append(('businessItemId', params['business_item_id']))  # noqa: E501
        if 'business_item_name' in params:
            query_params.append(('businessItemName', params['business_item_name']))  # noqa: E501
        if 'business_item_type' in params:
            query_params.append(('businessItemType', params['business_item_type']))  # noqa: E501
        if 'create_date' in params:
            query_params.append(('createDate', params['create_date']))  # noqa: E501
        if 'due_date' in params:
            query_params.append(('dueDate', params['due_date']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'workflow_task_user_relation' in params:
            query_params.append(('workflowTaskUserRelation', params['workflow_task_user_relation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_task_resource_get_task_form_data_get(self, workflow_task_id, **kwargs):  # noqa: E501
        """Returns the task form data of the workflow task.  # noqa: E501

        Returns the task form data of the workflow task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_get_task_form_data_get(workflow_task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_task_id: the <code>id</code> of the workflow task that should be used for the form data retrieval (required)
        :param str form_property_type: the form type to be returned
        :return: JsonTaskFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_task_resource_get_task_form_data_get_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_task_resource_get_task_form_data_get_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_task_resource_get_task_form_data_get_with_http_info(self, workflow_task_id, **kwargs):  # noqa: E501
        """Returns the task form data of the workflow task.  # noqa: E501

        Returns the task form data of the workflow task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_get_task_form_data_get_with_http_info(workflow_task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_task_id: the <code>id</code> of the workflow task that should be used for the form data retrieval (required)
        :param str form_property_type: the form type to be returned
        :return: JsonTaskFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_task_id', 'form_property_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_task_resource_get_task_form_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_task_id' is set
        if ('workflow_task_id' not in params or
                params['workflow_task_id'] is None):
            raise ValueError("Missing the required parameter `workflow_task_id` when calling `resource_workflow_task_resource_get_task_form_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_task_id' in params:
            path_params['workflowTaskId'] = params['workflow_task_id']  # noqa: E501

        query_params = []
        if 'form_property_type' in params:
            query_params.append(('formPropertyType', params['form_property_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks/{workflowTaskId}/taskFormData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonTaskFormDataImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_task_resource_get_workflow_task_get(self, workflow_task_id, **kwargs):  # noqa: E501
        """Returns the workflow task identified by given id.  # noqa: E501

        Returns the workflow task identified by given id. A task will only be returned when the user has the correct permission to view it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_get_workflow_task_get(workflow_task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_task_id: the <code>id</code> of the workflow task to return (required)
        :return: JsonWorkflowTaskImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_task_resource_get_workflow_task_get_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_task_resource_get_workflow_task_get_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_task_resource_get_workflow_task_get_with_http_info(self, workflow_task_id, **kwargs):  # noqa: E501
        """Returns the workflow task identified by given id.  # noqa: E501

        Returns the workflow task identified by given id. A task will only be returned when the user has the correct permission to view it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_task_resource_get_workflow_task_get_with_http_info(workflow_task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_task_id: the <code>id</code> of the workflow task to return (required)
        :return: JsonWorkflowTaskImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_task_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_task_resource_get_workflow_task_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_task_id' is set
        if ('workflow_task_id' not in params or
                params['workflow_task_id'] is None):
            raise ValueError("Missing the required parameter `workflow_task_id` when calling `resource_workflow_task_resource_get_workflow_task_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_task_id' in params:
            path_params['workflowTaskId'] = params['workflow_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks/{workflowTaskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonWorkflowTaskImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
