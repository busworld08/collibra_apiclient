# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ResponsibilitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_responsibility_resource_add_responsibilities_post(self, **kwargs):  # noqa: E501
        """Adds new responsibilities in one go.  # noqa: E501

        Adds new responsibilities in one go. Assigns given users to resources with given roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_add_responsibilities_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[JsonAddResponsibilityRequest] body: the list of properties of the reponsibilities to be added
        :return: list[JsonResponsibilityImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_responsibility_resource_add_responsibilities_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_responsibility_resource_add_responsibilities_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_responsibility_resource_add_responsibilities_post_with_http_info(self, **kwargs):  # noqa: E501
        """Adds new responsibilities in one go.  # noqa: E501

        Adds new responsibilities in one go. Assigns given users to resources with given roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_add_responsibilities_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[JsonAddResponsibilityRequest] body: the list of properties of the reponsibilities to be added
        :return: list[JsonResponsibilityImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_responsibility_resource_add_responsibilities_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JsonResponsibilityImpl]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_responsibility_resource_add_responsibility_post(self, **kwargs):  # noqa: E501
        """Adds new responsibility.  # noqa: E501

        Adds new responsibility. Assigns given user to resource with given role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_add_responsibility_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonAddResponsibilityRequest body: the properties of the reponsibility to be added
        :return: JsonResponsibilityImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_responsibility_resource_add_responsibility_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_responsibility_resource_add_responsibility_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_responsibility_resource_add_responsibility_post_with_http_info(self, **kwargs):  # noqa: E501
        """Adds new responsibility.  # noqa: E501

        Adds new responsibility. Assigns given user to resource with given role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_add_responsibility_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonAddResponsibilityRequest body: the properties of the reponsibility to be added
        :return: JsonResponsibilityImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_responsibility_resource_add_responsibility_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonResponsibilityImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_responsibility_resource_find_responsibilities_get(self, **kwargs):  # noqa: E501
        """Returns responsibilities matching the given search criteria.  # noqa: E501

        Returns responsibilities matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned responsibilities satisfy all constraints that are specified in this search criteria. By default a result containing 1000 responsibilities is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_find_responsibilities_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool global_only: Whether only global responsibilities should be searched
        :param bool include_inherited: Whether inherited responsibilities should be included in the search results
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :param list[str] owner_ids: The list of <code>id</code>s of the owners for which the responsibilities should be found
        :param list[str] resource_ids: The list of <code>id</code>s of the resources for which the responsibilities should be found
        :param list[str] role_ids: The list of <code>id</code>s of the roles for which the responsibilities should be found
        :param str sort_field: The field that should be used as reference for sorting
        :param str sort_order: The order of sorting
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_responsibility_resource_find_responsibilities_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_responsibility_resource_find_responsibilities_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_responsibility_resource_find_responsibilities_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns responsibilities matching the given search criteria.  # noqa: E501

        Returns responsibilities matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned responsibilities satisfy all constraints that are specified in this search criteria. By default a result containing 1000 responsibilities is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_find_responsibilities_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool global_only: Whether only global responsibilities should be searched
        :param bool include_inherited: Whether inherited responsibilities should be included in the search results
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :param list[str] owner_ids: The list of <code>id</code>s of the owners for which the responsibilities should be found
        :param list[str] resource_ids: The list of <code>id</code>s of the resources for which the responsibilities should be found
        :param list[str] role_ids: The list of <code>id</code>s of the roles for which the responsibilities should be found
        :param str sort_field: The field that should be used as reference for sorting
        :param str sort_order: The order of sorting
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['global_only', 'include_inherited', 'limit', 'offset', 'owner_ids', 'resource_ids', 'role_ids', 'sort_field', 'sort_order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_responsibility_resource_find_responsibilities_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'global_only' in params:
            query_params.append(('globalOnly', params['global_only']))  # noqa: E501
        if 'include_inherited' in params:
            query_params.append(('includeInherited', params['include_inherited']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'owner_ids' in params:
            query_params.append(('ownerIds', params['owner_ids']))  # noqa: E501
            collection_formats['ownerIds'] = 'multi'  # noqa: E501
        if 'resource_ids' in params:
            query_params.append(('resourceIds', params['resource_ids']))  # noqa: E501
            collection_formats['resourceIds'] = 'multi'  # noqa: E501
        if 'role_ids' in params:
            query_params.append(('roleIds', params['role_ids']))  # noqa: E501
            collection_formats['roleIds'] = 'multi'  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_responsibility_resource_get_responsibility_get(self, responsibility_id, **kwargs):  # noqa: E501
        """Returns responsibility identified by given id.  # noqa: E501

        Returns responsibility identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_get_responsibility_get(responsibility_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str responsibility_id: the <code>id</code> of the responsibility (required)
        :return: JsonResponsibilityImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_responsibility_resource_get_responsibility_get_with_http_info(responsibility_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_responsibility_resource_get_responsibility_get_with_http_info(responsibility_id, **kwargs)  # noqa: E501
            return data

    def resource_responsibility_resource_get_responsibility_get_with_http_info(self, responsibility_id, **kwargs):  # noqa: E501
        """Returns responsibility identified by given id.  # noqa: E501

        Returns responsibility identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_get_responsibility_get_with_http_info(responsibility_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str responsibility_id: the <code>id</code> of the responsibility (required)
        :return: JsonResponsibilityImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['responsibility_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_responsibility_resource_get_responsibility_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'responsibility_id' is set
        if ('responsibility_id' not in params or
                params['responsibility_id'] is None):
            raise ValueError("Missing the required parameter `responsibility_id` when calling `resource_responsibility_resource_get_responsibility_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'responsibility_id' in params:
            path_params['responsibilityId'] = params['responsibility_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities/{responsibilityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonResponsibilityImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_responsibility_resource_remove_responsibilities_delete(self, **kwargs):  # noqa: E501
        """Removes responsibilities identified by given ids.  # noqa: E501

        Removes responsibilities identified by given ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_remove_responsibilities_delete(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] body: the <code>id</code>s of the responsibilities to remove
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_responsibility_resource_remove_responsibilities_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_responsibility_resource_remove_responsibilities_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_responsibility_resource_remove_responsibilities_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Removes responsibilities identified by given ids.  # noqa: E501

        Removes responsibilities identified by given ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_remove_responsibilities_delete_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] body: the <code>id</code>s of the responsibilities to remove
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_responsibility_resource_remove_responsibilities_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_responsibility_resource_remove_responsibility_delete(self, responsibility_id, **kwargs):  # noqa: E501
        """Removes responsibility identified by given id.  # noqa: E501

        Removes responsibility identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_remove_responsibility_delete(responsibility_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str responsibility_id: the <code>id</code> of the responsibility (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_responsibility_resource_remove_responsibility_delete_with_http_info(responsibility_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_responsibility_resource_remove_responsibility_delete_with_http_info(responsibility_id, **kwargs)  # noqa: E501
            return data

    def resource_responsibility_resource_remove_responsibility_delete_with_http_info(self, responsibility_id, **kwargs):  # noqa: E501
        """Removes responsibility identified by given id.  # noqa: E501

        Removes responsibility identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_responsibility_resource_remove_responsibility_delete_with_http_info(responsibility_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str responsibility_id: the <code>id</code> of the responsibility (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['responsibility_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_responsibility_resource_remove_responsibility_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'responsibility_id' is set
        if ('responsibility_id' not in params or
                params['responsibility_id'] is None):
            raise ValueError("Missing the required parameter `responsibility_id` when calling `resource_responsibility_resource_remove_responsibility_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'responsibility_id' in params:
            path_params['responsibilityId'] = params['responsibility_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities/{responsibilityId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
