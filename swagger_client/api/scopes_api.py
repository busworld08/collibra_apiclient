# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ScopesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_scope_resource_add_scope_post(self, **kwargs):  # noqa: E501
        """Adds new scope.  # noqa: E501

        Adds new scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_add_scope_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonAddScopeRequest body: the properties of the scope to be added
        :return: JsonScopeImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_scope_resource_add_scope_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_scope_resource_add_scope_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_scope_resource_add_scope_post_with_http_info(self, **kwargs):  # noqa: E501
        """Adds new scope.  # noqa: E501

        Adds new scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_add_scope_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonAddScopeRequest body: the properties of the scope to be added
        :return: JsonScopeImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_scope_resource_add_scope_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/scopes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonScopeImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_scope_resource_change_scope_patch(self, scope_id, **kwargs):  # noqa: E501
        """Changes the scope with the information that is present in the request.  # noqa: E501

        Changes the scope with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_change_scope_patch(scope_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scope_id: the <code>id</code> of the scope to be changed (required)
        :param JsonChangeScopeRequest body: the properties of the scope to be changed
        :return: JsonScopeImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_scope_resource_change_scope_patch_with_http_info(scope_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_scope_resource_change_scope_patch_with_http_info(scope_id, **kwargs)  # noqa: E501
            return data

    def resource_scope_resource_change_scope_patch_with_http_info(self, scope_id, **kwargs):  # noqa: E501
        """Changes the scope with the information that is present in the request.  # noqa: E501

        Changes the scope with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_change_scope_patch_with_http_info(scope_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scope_id: the <code>id</code> of the scope to be changed (required)
        :param JsonChangeScopeRequest body: the properties of the scope to be changed
        :return: JsonScopeImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_scope_resource_change_scope_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `resource_scope_resource_change_scope_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/scopes/{scopeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonScopeImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_scope_resource_get_all_scopes_get(self, **kwargs):  # noqa: E501
        """Returns all scopes.  # noqa: E501

        Returns all scopes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_get_all_scopes_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_scope_resource_get_all_scopes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_scope_resource_get_all_scopes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_scope_resource_get_all_scopes_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all scopes.  # noqa: E501

        Returns all scopes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_get_all_scopes_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_scope_resource_get_all_scopes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/scopes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_scope_resource_get_scope_get(self, scope_id, **kwargs):  # noqa: E501
        """Returns scope identified by given id.  # noqa: E501

        Returns scope identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_get_scope_get(scope_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scope_id: the <code>id</code> of the scope (required)
        :return: JsonScopeImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_scope_resource_get_scope_get_with_http_info(scope_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_scope_resource_get_scope_get_with_http_info(scope_id, **kwargs)  # noqa: E501
            return data

    def resource_scope_resource_get_scope_get_with_http_info(self, scope_id, **kwargs):  # noqa: E501
        """Returns scope identified by given id.  # noqa: E501

        Returns scope identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_get_scope_get_with_http_info(scope_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scope_id: the <code>id</code> of the scope (required)
        :return: JsonScopeImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_scope_resource_get_scope_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `resource_scope_resource_get_scope_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/scopes/{scopeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonScopeImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_scope_resource_remove_scope_delete(self, scope_id, **kwargs):  # noqa: E501
        """Removes scope identified by given id.  # noqa: E501

        Removes scope identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_remove_scope_delete(scope_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scope_id: the <code>id</code> of the scope (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_scope_resource_remove_scope_delete_with_http_info(scope_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_scope_resource_remove_scope_delete_with_http_info(scope_id, **kwargs)  # noqa: E501
            return data

    def resource_scope_resource_remove_scope_delete_with_http_info(self, scope_id, **kwargs):  # noqa: E501
        """Removes scope identified by given id.  # noqa: E501

        Removes scope identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_scope_resource_remove_scope_delete_with_http_info(scope_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scope_id: the <code>id</code> of the scope (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_scope_resource_remove_scope_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `resource_scope_resource_remove_scope_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/scopes/{scopeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
