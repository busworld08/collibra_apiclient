# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StatusesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_status_resource_add_status_post(self, **kwargs):  # noqa: E501
        """Adds new status.  # noqa: E501

        Adds new status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_add_status_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonAddStatusRequest body: the properties of the status to be added
        :return: JsonStatusImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_status_resource_add_status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_status_resource_add_status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_status_resource_add_status_post_with_http_info(self, **kwargs):  # noqa: E501
        """Adds new status.  # noqa: E501

        Adds new status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_add_status_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param JsonAddStatusRequest body: the properties of the status to be added
        :return: JsonStatusImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_status_resource_add_status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statuses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonStatusImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_status_resource_add_statuses_post(self, **kwargs):  # noqa: E501
        """Adds multiple statuses.  # noqa: E501

        Adds multiple statuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_add_statuses_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[JsonAddStatusRequest] body: the properties of the statuses to be added
        :return: list[JsonStatusImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_status_resource_add_statuses_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_status_resource_add_statuses_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_status_resource_add_statuses_post_with_http_info(self, **kwargs):  # noqa: E501
        """Adds multiple statuses.  # noqa: E501

        Adds multiple statuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_add_statuses_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[JsonAddStatusRequest] body: the properties of the statuses to be added
        :return: list[JsonStatusImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_status_resource_add_statuses_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statuses/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JsonStatusImpl]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_status_resource_change_status_patch(self, status_id, **kwargs):  # noqa: E501
        """Changes the status with the information that is present in the request.  # noqa: E501

        Changes the status with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_change_status_patch(status_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str status_id: the UUID of the status to be changed (required)
        :param JsonChangeStatusRequest body: the properties of the status to be changed
        :return: JsonStatusImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_status_resource_change_status_patch_with_http_info(status_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_status_resource_change_status_patch_with_http_info(status_id, **kwargs)  # noqa: E501
            return data

    def resource_status_resource_change_status_patch_with_http_info(self, status_id, **kwargs):  # noqa: E501
        """Changes the status with the information that is present in the request.  # noqa: E501

        Changes the status with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_change_status_patch_with_http_info(status_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str status_id: the UUID of the status to be changed (required)
        :param JsonChangeStatusRequest body: the properties of the status to be changed
        :return: JsonStatusImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_status_resource_change_status_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_id' is set
        if ('status_id' not in params or
                params['status_id'] is None):
            raise ValueError("Missing the required parameter `status_id` when calling `resource_status_resource_change_status_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'status_id' in params:
            path_params['statusId'] = params['status_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statuses/{statusId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonStatusImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_status_resource_change_statuses_patch(self, **kwargs):  # noqa: E501
        """Changes multiple statuses.  # noqa: E501

        Changes multiple statuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_change_statuses_patch(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[JsonChangeStatusRequest] body: the properties of the statuses to be changed
        :return: list[JsonStatusImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_status_resource_change_statuses_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_status_resource_change_statuses_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_status_resource_change_statuses_patch_with_http_info(self, **kwargs):  # noqa: E501
        """Changes multiple statuses.  # noqa: E501

        Changes multiple statuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_change_statuses_patch_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[JsonChangeStatusRequest] body: the properties of the statuses to be changed
        :return: list[JsonStatusImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_status_resource_change_statuses_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statuses/bulk', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JsonStatusImpl]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_status_resource_find_statuses_get(self, **kwargs):  # noqa: E501
        """Returns statuses matching the given search criteria.  # noqa: E501

        Returns statuses matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned statuses satisfy all constraints that are specified in this search criteria. By default a result containing 1000 statuses is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_find_statuses_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str description: The description of the status to search for
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param str name: The name of the status to search for
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_status_resource_find_statuses_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_status_resource_find_statuses_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_status_resource_find_statuses_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns statuses matching the given search criteria.  # noqa: E501

        Returns statuses matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned statuses satisfy all constraints that are specified in this search criteria. By default a result containing 1000 statuses is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_find_statuses_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str description: The description of the status to search for
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param str name: The name of the status to search for
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['description', 'limit', 'name', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_status_resource_find_statuses_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_status_resource_get_status_by_name_get(self, status_name, **kwargs):  # noqa: E501
        """Returns status identified by given name.  # noqa: E501

        Returns status identified by given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_get_status_by_name_get(status_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str status_name: the name of the status (required)
        :return: JsonStatusImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_status_resource_get_status_by_name_get_with_http_info(status_name, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_status_resource_get_status_by_name_get_with_http_info(status_name, **kwargs)  # noqa: E501
            return data

    def resource_status_resource_get_status_by_name_get_with_http_info(self, status_name, **kwargs):  # noqa: E501
        """Returns status identified by given name.  # noqa: E501

        Returns status identified by given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_get_status_by_name_get_with_http_info(status_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str status_name: the name of the status (required)
        :return: JsonStatusImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_status_resource_get_status_by_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_name' is set
        if ('status_name' not in params or
                params['status_name'] is None):
            raise ValueError("Missing the required parameter `status_name` when calling `resource_status_resource_get_status_by_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'status_name' in params:
            path_params['statusName'] = params['status_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statuses/name/{statusName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonStatusImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_status_resource_get_status_get(self, status_id, **kwargs):  # noqa: E501
        """Returns status identified by given id.  # noqa: E501

        Returns status identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_get_status_get(status_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str status_id: the <code>id</code> of the status (required)
        :return: JsonStatusImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_status_resource_get_status_get_with_http_info(status_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_status_resource_get_status_get_with_http_info(status_id, **kwargs)  # noqa: E501
            return data

    def resource_status_resource_get_status_get_with_http_info(self, status_id, **kwargs):  # noqa: E501
        """Returns status identified by given id.  # noqa: E501

        Returns status identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_get_status_get_with_http_info(status_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str status_id: the <code>id</code> of the status (required)
        :return: JsonStatusImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_status_resource_get_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_id' is set
        if ('status_id' not in params or
                params['status_id'] is None):
            raise ValueError("Missing the required parameter `status_id` when calling `resource_status_resource_get_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'status_id' in params:
            path_params['statusId'] = params['status_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statuses/{statusId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonStatusImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_status_resource_remove_status_delete(self, status_id, **kwargs):  # noqa: E501
        """Removes status identified by given id.  # noqa: E501

        Removes status identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_remove_status_delete(status_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str status_id: the <code>id</code> of the status (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_status_resource_remove_status_delete_with_http_info(status_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_status_resource_remove_status_delete_with_http_info(status_id, **kwargs)  # noqa: E501
            return data

    def resource_status_resource_remove_status_delete_with_http_info(self, status_id, **kwargs):  # noqa: E501
        """Removes status identified by given id.  # noqa: E501

        Removes status identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_remove_status_delete_with_http_info(status_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str status_id: the <code>id</code> of the status (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_status_resource_remove_status_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_id' is set
        if ('status_id' not in params or
                params['status_id'] is None):
            raise ValueError("Missing the required parameter `status_id` when calling `resource_status_resource_remove_status_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'status_id' in params:
            path_params['statusId'] = params['status_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statuses/{statusId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_status_resource_remove_statuses_delete(self, **kwargs):  # noqa: E501
        """Removes multiple statuses.  # noqa: E501

        Removes multiple statuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_remove_statuses_delete(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] body: the <code>id</code>s of the statuses to be removed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_status_resource_remove_statuses_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_status_resource_remove_statuses_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_status_resource_remove_statuses_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Removes multiple statuses.  # noqa: E501

        Removes multiple statuses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_status_resource_remove_statuses_delete_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] body: the <code>id</code>s of the statuses to be removed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_status_resource_remove_statuses_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/statuses/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
