# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkflowDefinitionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def resource_workflow_definition_resource_add_asset_type_assignment_rule_post(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Adds an asset type assignment rule to the workflow definition specified in the request.  # noqa: E501

        Adds an asset type assignment rule to the workflow definition specified in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_add_asset_type_assignment_rule_post(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonAddAssetTypeAssignmentRuleRequest body: the request describing assignment rule to be added
        :return: JsonAssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_add_asset_type_assignment_rule_post_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_add_asset_type_assignment_rule_post_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_add_asset_type_assignment_rule_post_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Adds an asset type assignment rule to the workflow definition specified in the request.  # noqa: E501

        Adds an asset type assignment rule to the workflow definition specified in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_add_asset_type_assignment_rule_post_with_http_info(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonAddAssetTypeAssignmentRuleRequest body: the request describing assignment rule to be added
        :return: JsonAssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_add_asset_type_assignment_rule_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_add_asset_type_assignment_rule_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/assetTypeAssignmentRules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonAssetAssignmentRuleImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_add_domain_type_assignment_rule_post(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Adds an domain type assignment rule to the workflow definition specified in the request.  # noqa: E501

        Adds an domain type assignment rule to the workflow definition specified in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_add_domain_type_assignment_rule_post(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonAddDomainTypeAssignmentRuleRequest body: the request describing assignment rule to be added
        :return: JsonDomainAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_add_domain_type_assignment_rule_post_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_add_domain_type_assignment_rule_post_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_add_domain_type_assignment_rule_post_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Adds an domain type assignment rule to the workflow definition specified in the request.  # noqa: E501

        Adds an domain type assignment rule to the workflow definition specified in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_add_domain_type_assignment_rule_post_with_http_info(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonAddDomainTypeAssignmentRuleRequest body: the request describing assignment rule to be added
        :return: JsonDomainAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_add_domain_type_assignment_rule_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_add_domain_type_assignment_rule_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/domainTypeAssignmentRules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonDomainAssignmentRuleImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_change_asset_type_assignment_rule_patch(self, rule_id, workflow_definition_id, **kwargs):  # noqa: E501
        """Changes asset type assignment rule with the information that is present in the request.  # noqa: E501

        Changes asset type assignment rule with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_change_asset_type_assignment_rule_patch(rule_id, workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: the <code>id</code> of the assignment rule to be changed (required)
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonChangeAssetTypeAssignmentRuleRequest body: changes that are to be performed on the asset type assignment rule
        :return: JsonAssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_change_asset_type_assignment_rule_patch_with_http_info(rule_id, workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_change_asset_type_assignment_rule_patch_with_http_info(rule_id, workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_change_asset_type_assignment_rule_patch_with_http_info(self, rule_id, workflow_definition_id, **kwargs):  # noqa: E501
        """Changes asset type assignment rule with the information that is present in the request.  # noqa: E501

        Changes asset type assignment rule with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_change_asset_type_assignment_rule_patch_with_http_info(rule_id, workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: the <code>id</code> of the assignment rule to be changed (required)
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonChangeAssetTypeAssignmentRuleRequest body: changes that are to be performed on the asset type assignment rule
        :return: JsonAssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule_id', 'workflow_definition_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_change_asset_type_assignment_rule_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `resource_workflow_definition_resource_change_asset_type_assignment_rule_patch`")  # noqa: E501
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_change_asset_type_assignment_rule_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/assetTypeAssignmentRules/{ruleId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonAssetAssignmentRuleImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_change_domain_type_assignment_rule_patch(self, rule_id, workflow_definition_id, **kwargs):  # noqa: E501
        """Changes domain type assignment rule with the information that is present in the request.  # noqa: E501

        Changes domain type assignment rule with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_change_domain_type_assignment_rule_patch(rule_id, workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: the <code>id</code> of the assignment rule to be changed (required)
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonChangeDomainTypeAssignmentRuleRequest body: changes that are to be performed on the domain type assignment rule
        :return: JsonDomainAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_change_domain_type_assignment_rule_patch_with_http_info(rule_id, workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_change_domain_type_assignment_rule_patch_with_http_info(rule_id, workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_change_domain_type_assignment_rule_patch_with_http_info(self, rule_id, workflow_definition_id, **kwargs):  # noqa: E501
        """Changes domain type assignment rule with the information that is present in the request.  # noqa: E501

        Changes domain type assignment rule with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_change_domain_type_assignment_rule_patch_with_http_info(rule_id, workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: the <code>id</code> of the assignment rule to be changed (required)
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonChangeDomainTypeAssignmentRuleRequest body: changes that are to be performed on the domain type assignment rule
        :return: JsonDomainAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule_id', 'workflow_definition_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_change_domain_type_assignment_rule_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `resource_workflow_definition_resource_change_domain_type_assignment_rule_patch`")  # noqa: E501
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_change_domain_type_assignment_rule_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/domainTypeAssignmentRules/{ruleId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonDomainAssignmentRuleImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_change_workflow_definition_patch(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Changes the workflow definition with the information that is present in the request.  # noqa: E501

        Changes the workflow definition with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_change_workflow_definition_patch(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonChangeWorkflowDefinitionRequest body: changes that are to be performed on the workflow definition
        :return: JsonWorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_change_workflow_definition_patch_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_change_workflow_definition_patch_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_change_workflow_definition_patch_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Changes the workflow definition with the information that is present in the request.  # noqa: E501

        Changes the workflow definition with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_change_workflow_definition_patch_with_http_info(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :param JsonChangeWorkflowDefinitionRequest body: changes that are to be performed on the workflow definition
        :return: JsonWorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_change_workflow_definition_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_change_workflow_definition_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonWorkflowDefinitionImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_deploy_workflow_definition_post(self, **kwargs):  # noqa: E501
        """Deploys workflow definition (the business process and resources) using the specified request.  # noqa: E501

        Deploys workflow definition (the business process and resources) using the specified request. <p> The input stream can represent a single file(e.g: .bpmn20.xml or .bpmn) or an archive file (e.g: .zip or .bar). It is not allowed to deploy a resource containing more than one process definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_deploy_workflow_definition_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: the file with described workflow definition
        :param str file_name: the name of the file
        :param  body: 
        :return: JsonWorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_deploy_workflow_definition_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_deploy_workflow_definition_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_deploy_workflow_definition_post_with_http_info(self, **kwargs):  # noqa: E501
        """Deploys workflow definition (the business process and resources) using the specified request.  # noqa: E501

        Deploys workflow definition (the business process and resources) using the specified request. <p> The input stream can represent a single file(e.g: .bpmn20.xml or .bpmn) or an archive file (e.g: .zip or .bar). It is not allowed to deploy a resource containing more than one process definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_deploy_workflow_definition_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: the file with described workflow definition
        :param str file_name: the name of the file
        :param  body: 
        :return: JsonWorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'file_name', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_deploy_workflow_definition_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'file_name' in params:
            form_params.append(('fileName', params['file_name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonWorkflowDefinitionImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_find_workflow_definitions_get(self, **kwargs):  # noqa: E501
        """Finds the workflow definitions matching the criteria described in the request object.  # noqa: E501

        Finds the workflow definitions matching the criteria described in the request object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_find_workflow_definitions_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] asset_id: The list of the <code>id</code>s of business items (assets) for which the workflow definitions should be found
        :param list[str] community_id: The list of the <code>id</code>s of business items (communities) for which the workflow definitions should be found
        :param list[str] domain_id: The list of the <code>id</code>s of business items (domains) for which the workflow definitions should be found
        :param bool enabled: Whether the found workflow definitions should be enabled
        :param bool _global: Whether the found workflow definitions should be global
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param str name: The name (could be partial) of the workflow definition to search for
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_find_workflow_definitions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_find_workflow_definitions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_find_workflow_definitions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Finds the workflow definitions matching the criteria described in the request object.  # noqa: E501

        Finds the workflow definitions matching the criteria described in the request object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_find_workflow_definitions_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] asset_id: The list of the <code>id</code>s of business items (assets) for which the workflow definitions should be found
        :param list[str] community_id: The list of the <code>id</code>s of business items (communities) for which the workflow definitions should be found
        :param list[str] domain_id: The list of the <code>id</code>s of business items (domains) for which the workflow definitions should be found
        :param bool enabled: Whether the found workflow definitions should be enabled
        :param bool _global: Whether the found workflow definitions should be global
        :param int limit: The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used
        :param str name: The name (could be partial) of the workflow definition to search for
        :param int offset: The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>
        :return: JsonPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'community_id', 'domain_id', 'enabled', '_global', 'limit', 'name', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_find_workflow_definitions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset_id' in params:
            query_params.append(('assetId', params['asset_id']))  # noqa: E501
            collection_formats['assetId'] = 'multi'  # noqa: E501
        if 'community_id' in params:
            query_params.append(('communityId', params['community_id']))  # noqa: E501
            collection_formats['communityId'] = 'multi'  # noqa: E501
        if 'domain_id' in params:
            query_params.append(('domainId', params['domain_id']))  # noqa: E501
            collection_formats['domainId'] = 'multi'  # noqa: E501
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))  # noqa: E501
        if '_global' in params:
            query_params.append(('global', params['_global']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_get_configuration_start_form_data_get(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Returns the configuration start form data of the workflow task.  # noqa: E501

        Returns the configuration start form data of the workflow task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_configuration_start_form_data_get(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition that should be used for the form data retrieval (required)
        :param str form_property_type: the form type to be returned
        :return: JsonStartFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_get_configuration_start_form_data_get_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_get_configuration_start_form_data_get_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_get_configuration_start_form_data_get_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Returns the configuration start form data of the workflow task.  # noqa: E501

        Returns the configuration start form data of the workflow task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_configuration_start_form_data_get_with_http_info(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition that should be used for the form data retrieval (required)
        :param str form_property_type: the form type to be returned
        :return: JsonStartFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'form_property_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_get_configuration_start_form_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_get_configuration_start_form_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []
        if 'form_property_type' in params:
            query_params.append(('formPropertyType', params['form_property_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/workflowDefinition/{workflowDefinitionId}/configurationStartFormData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonStartFormDataImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_get_start_form_data_get(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Returns the start form data of the workflow task.  # noqa: E501

        Returns the start form data of the workflow task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_start_form_data_get(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition that should be used for the form data retrieval (required)
        :param str form_property_type: the form type to be returned
        :return: JsonStartFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_get_start_form_data_get_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_get_start_form_data_get_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_get_start_form_data_get_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Returns the start form data of the workflow task.  # noqa: E501

        Returns the start form data of the workflow task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_start_form_data_get_with_http_info(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition that should be used for the form data retrieval (required)
        :param str form_property_type: the form type to be returned
        :return: JsonStartFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'form_property_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_get_start_form_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_get_start_form_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []
        if 'form_property_type' in params:
            query_params.append(('formPropertyType', params['form_property_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/workflowDefinition/{workflowDefinitionId}/startFormData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonStartFormDataImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_get_workflow_definition_diagram_get(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Returns the diagram of the process with workflow definition identified by the given id.  # noqa: E501

        Returns the diagram of the process with workflow definition identified by the given id. The diagram input stream returned can be null as deployed workflow definitions without graphical notation included do not have a diagram.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_workflow_definition_diagram_get(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_get_workflow_definition_diagram_get_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_get_workflow_definition_diagram_get_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_get_workflow_definition_diagram_get_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Returns the diagram of the process with workflow definition identified by the given id.  # noqa: E501

        Returns the diagram of the process with workflow definition identified by the given id. The diagram input stream returned can be null as deployed workflow definitions without graphical notation included do not have a diagram.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_workflow_definition_diagram_get_with_http_info(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_get_workflow_definition_diagram_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_get_workflow_definition_diagram_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/diagram', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_get_workflow_definition_get(self, process_id, **kwargs):  # noqa: E501
        """Returns the workflow definition identified by given process id.  # noqa: E501

        Returns the workflow definition identified by given process id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_workflow_definition_get(process_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str process_id: the process id of the workflow definition (required)
        :return: JsonWorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_get_workflow_definition_get_with_http_info(process_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_get_workflow_definition_get_with_http_info(process_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_get_workflow_definition_get_with_http_info(self, process_id, **kwargs):  # noqa: E501
        """Returns the workflow definition identified by given process id.  # noqa: E501

        Returns the workflow definition identified by given process id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_workflow_definition_get_with_http_info(process_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str process_id: the process id of the workflow definition (required)
        :return: JsonWorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_get_workflow_definition_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params or
                params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `resource_workflow_definition_resource_get_workflow_definition_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'process_id' in params:
            path_params['processId'] = params['process_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/process/{processId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonWorkflowDefinitionImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_get_workflow_definition_xmlget(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Returns the XML source of the workflow definition identified by the given id.  # noqa: E501

        Returns the XML source of the workflow definition identified by the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_workflow_definition_xmlget(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_get_workflow_definition_xmlget_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_get_workflow_definition_xmlget_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_get_workflow_definition_xmlget_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Returns the XML source of the workflow definition identified by the given id.  # noqa: E501

        Returns the XML source of the workflow definition identified by the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_get_workflow_definition_xmlget_with_http_info(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_get_workflow_definition_xmlget" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_get_workflow_definition_xmlget`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/xml', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_remove_assignment_rule_delete(self, rule_id, workflow_definition_id, **kwargs):  # noqa: E501
        """Removes an assignment rule identified by the given id of the assignment rule and the id of the workflow definition.  # noqa: E501

        Removes an assignment rule identified by the given id of the assignment rule and the id of the workflow definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_remove_assignment_rule_delete(rule_id, workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: the <code>id</code> of the assignment rule (required)
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_remove_assignment_rule_delete_with_http_info(rule_id, workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_remove_assignment_rule_delete_with_http_info(rule_id, workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_remove_assignment_rule_delete_with_http_info(self, rule_id, workflow_definition_id, **kwargs):  # noqa: E501
        """Removes an assignment rule identified by the given id of the assignment rule and the id of the workflow definition.  # noqa: E501

        Removes an assignment rule identified by the given id of the assignment rule and the id of the workflow definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_remove_assignment_rule_delete_with_http_info(rule_id, workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: the <code>id</code> of the assignment rule (required)
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule_id', 'workflow_definition_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_remove_assignment_rule_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `resource_workflow_definition_resource_remove_assignment_rule_delete`")  # noqa: E501
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_remove_assignment_rule_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/assignmentRules/{ruleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_remove_workflow_definition_delete(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Removes the workflow definition identified by given id.  # noqa: E501

        Removes the workflow definition identified by given id. The WorkflowDefinition will be completely removed from the application, including any history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_remove_workflow_definition_delete(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_remove_workflow_definition_delete_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_remove_workflow_definition_delete_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_remove_workflow_definition_delete_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Removes the workflow definition identified by given id.  # noqa: E501

        Removes the workflow definition identified by given id. The WorkflowDefinition will be completely removed from the application, including any history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_remove_workflow_definition_delete_with_http_info(workflow_definition_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str workflow_definition_id: the <code>id</code> of the workflow definition (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_remove_workflow_definition_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `resource_workflow_definition_resource_remove_workflow_definition_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_workflow_definition_resource_remove_workflow_definition_post(self, **kwargs):  # noqa: E501
        """Removes multiple workflow definitions asynchronously.  # noqa: E501

        Removes multiple workflow definitions asynchronously. The WorkflowDefinitions will be completely removed from the application, including any history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_remove_workflow_definition_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] body: the list of <code>id</code>s of the workflow definitions to remove, i.e. [\"6f685f90-1036-4d30-983a-a9bbcdd7b8f6\", \"6f685f90-1036-4d30-983a-a9bbcdd7b123\"]
        :return: JsonJobImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_workflow_definition_resource_remove_workflow_definition_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_workflow_definition_resource_remove_workflow_definition_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_workflow_definition_resource_remove_workflow_definition_post_with_http_info(self, **kwargs):  # noqa: E501
        """Removes multiple workflow definitions asynchronously.  # noqa: E501

        Removes multiple workflow definitions asynchronously. The WorkflowDefinitions will be completely removed from the application, including any history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_workflow_definition_resource_remove_workflow_definition_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param list[str] body: the list of <code>id</code>s of the workflow definitions to remove, i.e. [\"6f685f90-1036-4d30-983a-a9bbcdd7b8f6\", \"6f685f90-1036-4d30-983a-a9bbcdd7b123\"]
        :return: JsonJobImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_workflow_definition_resource_remove_workflow_definition_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/removalJobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonJobImpl',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
