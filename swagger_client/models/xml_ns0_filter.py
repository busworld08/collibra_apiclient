# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_field import XmlNs0Field  # noqa: F401,E501
from swagger_client.models.xml_ns0_filter_operator import XmlNs0FilterOperator  # noqa: F401,E501


class XmlNs0Filter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'XmlNs0Field',
        'ignore_in_resource': 'bool',
        'inheritance': 'bool',
        'meta_included': 'bool',
        'operator': 'XmlNs0FilterOperator',
        'values': 'object'
    }

    attribute_map = {
        'field': 'field',
        'ignore_in_resource': 'ignoreInResource',
        'inheritance': 'inheritance',
        'meta_included': 'metaIncluded',
        'operator': 'operator',
        'values': 'values'
    }

    def __init__(self, field=None, ignore_in_resource=None, inheritance=None, meta_included=None, operator=None, values=None):  # noqa: E501
        """XmlNs0Filter - a model defined in Swagger"""  # noqa: E501

        self._field = None
        self._ignore_in_resource = None
        self._inheritance = None
        self._meta_included = None
        self._operator = None
        self._values = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if ignore_in_resource is not None:
            self.ignore_in_resource = ignore_in_resource
        if inheritance is not None:
            self.inheritance = inheritance
        if meta_included is not None:
            self.meta_included = meta_included
        if operator is not None:
            self.operator = operator
        if values is not None:
            self.values = values

    @property
    def field(self):
        """Gets the field of this XmlNs0Filter.  # noqa: E501

          # noqa: E501

        :return: The field of this XmlNs0Filter.  # noqa: E501
        :rtype: XmlNs0Field
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this XmlNs0Filter.

          # noqa: E501

        :param field: The field of this XmlNs0Filter.  # noqa: E501
        :type: XmlNs0Field
        """

        self._field = field

    @property
    def ignore_in_resource(self):
        """Gets the ignore_in_resource of this XmlNs0Filter.  # noqa: E501

          # noqa: E501

        :return: The ignore_in_resource of this XmlNs0Filter.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_in_resource

    @ignore_in_resource.setter
    def ignore_in_resource(self, ignore_in_resource):
        """Sets the ignore_in_resource of this XmlNs0Filter.

          # noqa: E501

        :param ignore_in_resource: The ignore_in_resource of this XmlNs0Filter.  # noqa: E501
        :type: bool
        """

        self._ignore_in_resource = ignore_in_resource

    @property
    def inheritance(self):
        """Gets the inheritance of this XmlNs0Filter.  # noqa: E501

          # noqa: E501

        :return: The inheritance of this XmlNs0Filter.  # noqa: E501
        :rtype: bool
        """
        return self._inheritance

    @inheritance.setter
    def inheritance(self, inheritance):
        """Sets the inheritance of this XmlNs0Filter.

          # noqa: E501

        :param inheritance: The inheritance of this XmlNs0Filter.  # noqa: E501
        :type: bool
        """

        self._inheritance = inheritance

    @property
    def meta_included(self):
        """Gets the meta_included of this XmlNs0Filter.  # noqa: E501

          # noqa: E501

        :return: The meta_included of this XmlNs0Filter.  # noqa: E501
        :rtype: bool
        """
        return self._meta_included

    @meta_included.setter
    def meta_included(self, meta_included):
        """Sets the meta_included of this XmlNs0Filter.

          # noqa: E501

        :param meta_included: The meta_included of this XmlNs0Filter.  # noqa: E501
        :type: bool
        """

        self._meta_included = meta_included

    @property
    def operator(self):
        """Gets the operator of this XmlNs0Filter.  # noqa: E501

          # noqa: E501

        :return: The operator of this XmlNs0Filter.  # noqa: E501
        :rtype: XmlNs0FilterOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this XmlNs0Filter.

          # noqa: E501

        :param operator: The operator of this XmlNs0Filter.  # noqa: E501
        :type: XmlNs0FilterOperator
        """

        self._operator = operator

    @property
    def values(self):
        """Gets the values of this XmlNs0Filter.  # noqa: E501

          # noqa: E501

        :return: The values of this XmlNs0Filter.  # noqa: E501
        :rtype: object
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this XmlNs0Filter.

          # noqa: E501

        :param values: The values of this XmlNs0Filter.  # noqa: E501
        :type: object
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0Filter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
