# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_attribute_kind import XmlNs0AttributeKind  # noqa: F401,E501
from swagger_client.models.xml_ns0_match_mode import XmlNs0MatchMode  # noqa: F401,E501
from swagger_client.models.xml_ns0_paged_request import XmlNs0PagedRequest  # noqa: F401,E501
from swagger_client.models.xml_ns0_sort_field import XmlNs0SortField  # noqa: F401,E501
from swagger_client.models.xml_ns0_sort_order import XmlNs0SortOrder  # noqa: F401,E501


class XmlNs0FindAttributeTypesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'float',
        'offset': 'float',
        'is_integer': 'bool',
        'kind': 'XmlNs0AttributeKind',
        'language': 'str',
        'name': 'str',
        'name_match_mode': 'XmlNs0MatchMode',
        'sort_field': 'XmlNs0SortField',
        'sort_order': 'XmlNs0SortOrder',
        'statistics_enabled': 'bool'
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
        'is_integer': 'isInteger',
        'kind': 'kind',
        'language': 'language',
        'name': 'name',
        'name_match_mode': 'nameMatchMode',
        'sort_field': 'sortField',
        'sort_order': 'sortOrder',
        'statistics_enabled': 'statisticsEnabled'
    }

    def __init__(self, limit=None, offset=None, is_integer=None, kind=None, language=None, name=None, name_match_mode=None, sort_field=None, sort_order=None, statistics_enabled=None):  # noqa: E501
        """XmlNs0FindAttributeTypesRequest - a model defined in Swagger"""  # noqa: E501

        self._limit = None
        self._offset = None
        self._is_integer = None
        self._kind = None
        self._language = None
        self._name = None
        self._name_match_mode = None
        self._sort_field = None
        self._sort_order = None
        self._statistics_enabled = None
        self.discriminator = None

        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if is_integer is not None:
            self.is_integer = is_integer
        if kind is not None:
            self.kind = kind
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if name_match_mode is not None:
            self.name_match_mode = name_match_mode
        if sort_field is not None:
            self.sort_field = sort_field
        if sort_order is not None:
            self.sort_order = sort_order
        if statistics_enabled is not None:
            self.statistics_enabled = statistics_enabled

    @property
    def limit(self):
        """Gets the limit of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :return: The limit of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this XmlNs0FindAttributeTypesRequest.

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :param limit: The limit of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :return: The offset of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this XmlNs0FindAttributeTypesRequest.

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :param offset: The offset of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def is_integer(self):
        """Gets the is_integer of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        Whether only integer-type attribute types should be searched or not  # noqa: E501

        :return: The is_integer of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_integer

    @is_integer.setter
    def is_integer(self, is_integer):
        """Sets the is_integer of this XmlNs0FindAttributeTypesRequest.

        Whether only integer-type attribute types should be searched or not  # noqa: E501

        :param is_integer: The is_integer of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: bool
        """

        self._is_integer = is_integer

    @property
    def kind(self):
        """Gets the kind of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        The kind of the attribute type to search for  # noqa: E501

        :return: The kind of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: XmlNs0AttributeKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this XmlNs0FindAttributeTypesRequest.

        The kind of the attribute type to search for  # noqa: E501

        :param kind: The kind of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: XmlNs0AttributeKind
        """

        self._kind = kind

    @property
    def language(self):
        """Gets the language of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        The language of the attribute type to search for  # noqa: E501

        :return: The language of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this XmlNs0FindAttributeTypesRequest.

        The language of the attribute type to search for  # noqa: E501

        :param language: The language of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        The name of the attribute type to search for  # noqa: E501

        :return: The name of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XmlNs0FindAttributeTypesRequest.

        The name of the attribute type to search for  # noqa: E501

        :param name: The name of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_match_mode(self):
        """Gets the name_match_mode of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        The match mode used to compare <code>name</code>.  # noqa: E501

        :return: The name_match_mode of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: XmlNs0MatchMode
        """
        return self._name_match_mode

    @name_match_mode.setter
    def name_match_mode(self, name_match_mode):
        """Sets the name_match_mode of this XmlNs0FindAttributeTypesRequest.

        The match mode used to compare <code>name</code>.  # noqa: E501

        :param name_match_mode: The name_match_mode of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: XmlNs0MatchMode
        """

        self._name_match_mode = name_match_mode

    @property
    def sort_field(self):
        """Gets the sort_field of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        The field that should be used as reference for sorting  # noqa: E501

        :return: The sort_field of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: XmlNs0SortField
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this XmlNs0FindAttributeTypesRequest.

        The field that should be used as reference for sorting  # noqa: E501

        :param sort_field: The sort_field of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: XmlNs0SortField
        """

        self._sort_field = sort_field

    @property
    def sort_order(self):
        """Gets the sort_order of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        The order of sorting  # noqa: E501

        :return: The sort_order of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: XmlNs0SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this XmlNs0FindAttributeTypesRequest.

        The order of sorting  # noqa: E501

        :param sort_order: The sort_order of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: XmlNs0SortOrder
        """

        self._sort_order = sort_order

    @property
    def statistics_enabled(self):
        """Gets the statistics_enabled of this XmlNs0FindAttributeTypesRequest.  # noqa: E501

        Whether the attribute types should be searched with statistics enabled or not  # noqa: E501

        :return: The statistics_enabled of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._statistics_enabled

    @statistics_enabled.setter
    def statistics_enabled(self, statistics_enabled):
        """Sets the statistics_enabled of this XmlNs0FindAttributeTypesRequest.

        Whether the attribute types should be searched with statistics enabled or not  # noqa: E501

        :param statistics_enabled: The statistics_enabled of this XmlNs0FindAttributeTypesRequest.  # noqa: E501
        :type: bool
        """

        self._statistics_enabled = statistics_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0FindAttributeTypesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
