# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_activity_cause import XmlNs0ActivityCause  # noqa: F401,E501
from swagger_client.models.xml_ns0_activity_type import XmlNs0ActivityType  # noqa: F401,E501
from swagger_client.models.xml_ns0_entity_impl import XmlNs0EntityImpl  # noqa: F401,E501


class XmlNs0ActivityImpl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'activity_type': 'XmlNs0ActivityType',
        'call_count': 'float',
        'call_id': 'str',
        'cause': 'XmlNs0ActivityCause',
        'description': 'str',
        'timestamp': 'float',
        'user': 'object'
    }

    attribute_map = {
        'id': 'id',
        'activity_type': 'activityType',
        'call_count': 'callCount',
        'call_id': 'callId',
        'cause': 'cause',
        'description': 'description',
        'timestamp': 'timestamp',
        'user': 'user'
    }

    def __init__(self, id=None, activity_type=None, call_count=None, call_id=None, cause=None, description=None, timestamp=None, user=None):  # noqa: E501
        """XmlNs0ActivityImpl - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._activity_type = None
        self._call_count = None
        self._call_id = None
        self._cause = None
        self._description = None
        self._timestamp = None
        self._user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if activity_type is not None:
            self.activity_type = activity_type
        if call_count is not None:
            self.call_count = call_count
        if call_id is not None:
            self.call_id = call_id
        if cause is not None:
            self.cause = cause
        if description is not None:
            self.description = description
        if timestamp is not None:
            self.timestamp = timestamp
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this XmlNs0ActivityImpl.  # noqa: E501

        The <code>id</code> of the represented object (entity)  # noqa: E501

        :return: The id of this XmlNs0ActivityImpl.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XmlNs0ActivityImpl.

        The <code>id</code> of the represented object (entity)  # noqa: E501

        :param id: The id of this XmlNs0ActivityImpl.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def activity_type(self):
        """Gets the activity_type of this XmlNs0ActivityImpl.  # noqa: E501

        The type of the activity, which could be ADD, UPDATE or DELETE  # noqa: E501

        :return: The activity_type of this XmlNs0ActivityImpl.  # noqa: E501
        :rtype: XmlNs0ActivityType
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this XmlNs0ActivityImpl.

        The type of the activity, which could be ADD, UPDATE or DELETE  # noqa: E501

        :param activity_type: The activity_type of this XmlNs0ActivityImpl.  # noqa: E501
        :type: XmlNs0ActivityType
        """

        self._activity_type = activity_type

    @property
    def call_count(self):
        """Gets the call_count of this XmlNs0ActivityImpl.  # noqa: E501

        The number of calls standing behind the activity  # noqa: E501

        :return: The call_count of this XmlNs0ActivityImpl.  # noqa: E501
        :rtype: float
        """
        return self._call_count

    @call_count.setter
    def call_count(self, call_count):
        """Sets the call_count of this XmlNs0ActivityImpl.

        The number of calls standing behind the activity  # noqa: E501

        :param call_count: The call_count of this XmlNs0ActivityImpl.  # noqa: E501
        :type: float
        """

        self._call_count = call_count

    @property
    def call_id(self):
        """Gets the call_id of this XmlNs0ActivityImpl.  # noqa: E501

        The <code>id</code> of the call that resulted in an activity  # noqa: E501

        :return: The call_id of this XmlNs0ActivityImpl.  # noqa: E501
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this XmlNs0ActivityImpl.

        The <code>id</code> of the call that resulted in an activity  # noqa: E501

        :param call_id: The call_id of this XmlNs0ActivityImpl.  # noqa: E501
        :type: str
        """

        self._call_id = call_id

    @property
    def cause(self):
        """Gets the cause of this XmlNs0ActivityImpl.  # noqa: E501

        The cause of the activity  # noqa: E501

        :return: The cause of this XmlNs0ActivityImpl.  # noqa: E501
        :rtype: XmlNs0ActivityCause
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this XmlNs0ActivityImpl.

        The cause of the activity  # noqa: E501

        :param cause: The cause of this XmlNs0ActivityImpl.  # noqa: E501
        :type: XmlNs0ActivityCause
        """

        self._cause = cause

    @property
    def description(self):
        """Gets the description of this XmlNs0ActivityImpl.  # noqa: E501

        The description of the activity. It's the string in json format. It's exact content depends on activityType and on the type of the resource that was affected by the change. Possible fields are: <ul> <li> affected - always there, consists of id, type and name, it's the reference to the resource that was added, deleted or updated with the activity. </li> <li> new, old - for all activities of ActivityType.UPDATE, respectively new and old value of the field. It can be either the reference to another object (same as affected) or just a string (eg. name change). </li> <li> field - for ActivityType.UPDATE the name of the field that was changed, eg. status, name, target etc. </li> <li> role, people, resource - only for the responsibility activities, people means owner (user or group). </li> <li> source, target, role, coRole - only for relations (including complex relation legs). </li> <li> complexRelation, legs - only for complex relations, legs here stands for all the legs that the complex relation consists of. </li> <li> kind - only for attributes, it's attribute kind, eg. boolean, string, numeric etc. </li> <li> businessItem - only for workflows, reference to an object that is the business item for non-global workflows. </li> <li> attachmentFile - only for attachments, it's the name of the file that was attached. </li> </ul>  # noqa: E501

        :return: The description of this XmlNs0ActivityImpl.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XmlNs0ActivityImpl.

        The description of the activity. It's the string in json format. It's exact content depends on activityType and on the type of the resource that was affected by the change. Possible fields are: <ul> <li> affected - always there, consists of id, type and name, it's the reference to the resource that was added, deleted or updated with the activity. </li> <li> new, old - for all activities of ActivityType.UPDATE, respectively new and old value of the field. It can be either the reference to another object (same as affected) or just a string (eg. name change). </li> <li> field - for ActivityType.UPDATE the name of the field that was changed, eg. status, name, target etc. </li> <li> role, people, resource - only for the responsibility activities, people means owner (user or group). </li> <li> source, target, role, coRole - only for relations (including complex relation legs). </li> <li> complexRelation, legs - only for complex relations, legs here stands for all the legs that the complex relation consists of. </li> <li> kind - only for attributes, it's attribute kind, eg. boolean, string, numeric etc. </li> <li> businessItem - only for workflows, reference to an object that is the business item for non-global workflows. </li> <li> attachmentFile - only for attachments, it's the name of the file that was attached. </li> </ul>  # noqa: E501

        :param description: The description of this XmlNs0ActivityImpl.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def timestamp(self):
        """Gets the timestamp of this XmlNs0ActivityImpl.  # noqa: E501

        The time when the activity happened. It is the timestamp (in UTC time standard)  # noqa: E501

        :return: The timestamp of this XmlNs0ActivityImpl.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this XmlNs0ActivityImpl.

        The time when the activity happened. It is the timestamp (in UTC time standard)  # noqa: E501

        :param timestamp: The timestamp of this XmlNs0ActivityImpl.  # noqa: E501
        :type: float
        """

        self._timestamp = timestamp

    @property
    def user(self):
        """Gets the user of this XmlNs0ActivityImpl.  # noqa: E501

        The reference to the user who performed the activity  # noqa: E501

        :return: The user of this XmlNs0ActivityImpl.  # noqa: E501
        :rtype: object
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this XmlNs0ActivityImpl.

        The reference to the user who performed the activity  # noqa: E501

        :param user: The user of this XmlNs0ActivityImpl.  # noqa: E501
        :type: object
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0ActivityImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
