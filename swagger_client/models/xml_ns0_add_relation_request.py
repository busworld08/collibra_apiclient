# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class XmlNs0AddRelationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ending_date': 'float',
        'source_id': 'str',
        'starting_date': 'float',
        'target_id': 'str',
        'type_id': 'str'
    }

    attribute_map = {
        'ending_date': 'endingDate',
        'source_id': 'sourceId',
        'starting_date': 'startingDate',
        'target_id': 'targetId',
        'type_id': 'typeId'
    }

    def __init__(self, ending_date=None, source_id=None, starting_date=None, target_id=None, type_id=None):  # noqa: E501
        """XmlNs0AddRelationRequest - a model defined in Swagger"""  # noqa: E501

        self._ending_date = None
        self._source_id = None
        self._starting_date = None
        self._target_id = None
        self._type_id = None
        self.discriminator = None

        if ending_date is not None:
            self.ending_date = ending_date
        if source_id is not None:
            self.source_id = source_id
        if starting_date is not None:
            self.starting_date = starting_date
        if target_id is not None:
            self.target_id = target_id
        if type_id is not None:
            self.type_id = type_id

    @property
    def ending_date(self):
        """Gets the ending_date of this XmlNs0AddRelationRequest.  # noqa: E501

        The ending date of the relation  # noqa: E501

        :return: The ending_date of this XmlNs0AddRelationRequest.  # noqa: E501
        :rtype: float
        """
        return self._ending_date

    @ending_date.setter
    def ending_date(self, ending_date):
        """Sets the ending_date of this XmlNs0AddRelationRequest.

        The ending date of the relation  # noqa: E501

        :param ending_date: The ending_date of this XmlNs0AddRelationRequest.  # noqa: E501
        :type: float
        """

        self._ending_date = ending_date

    @property
    def source_id(self):
        """Gets the source_id of this XmlNs0AddRelationRequest.  # noqa: E501

        The <code>id</code> of the source of the relation  # noqa: E501

        :return: The source_id of this XmlNs0AddRelationRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this XmlNs0AddRelationRequest.

        The <code>id</code> of the source of the relation  # noqa: E501

        :param source_id: The source_id of this XmlNs0AddRelationRequest.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def starting_date(self):
        """Gets the starting_date of this XmlNs0AddRelationRequest.  # noqa: E501

        The starting date of the relation  # noqa: E501

        :return: The starting_date of this XmlNs0AddRelationRequest.  # noqa: E501
        :rtype: float
        """
        return self._starting_date

    @starting_date.setter
    def starting_date(self, starting_date):
        """Sets the starting_date of this XmlNs0AddRelationRequest.

        The starting date of the relation  # noqa: E501

        :param starting_date: The starting_date of this XmlNs0AddRelationRequest.  # noqa: E501
        :type: float
        """

        self._starting_date = starting_date

    @property
    def target_id(self):
        """Gets the target_id of this XmlNs0AddRelationRequest.  # noqa: E501

        The <code>id</code> of the target of the relation  # noqa: E501

        :return: The target_id of this XmlNs0AddRelationRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this XmlNs0AddRelationRequest.

        The <code>id</code> of the target of the relation  # noqa: E501

        :param target_id: The target_id of this XmlNs0AddRelationRequest.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def type_id(self):
        """Gets the type_id of this XmlNs0AddRelationRequest.  # noqa: E501

        The <code>id</code> of the type of the relation  # noqa: E501

        :return: The type_id of this XmlNs0AddRelationRequest.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this XmlNs0AddRelationRequest.

        The <code>id</code> of the type of the relation  # noqa: E501

        :param type_id: The type_id of this XmlNs0AddRelationRequest.  # noqa: E501
        :type: str
        """

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0AddRelationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
