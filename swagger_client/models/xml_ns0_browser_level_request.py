# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class XmlNs0BrowserLevelRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_type_ids': 'str',
        'communities_included': 'bool',
        'community_id': 'str',
        'domain_type_id': 'str',
        'domains_included': 'bool'
    }

    attribute_map = {
        'asset_type_ids': 'assetTypeIds',
        'communities_included': 'communitiesIncluded',
        'community_id': 'communityId',
        'domain_type_id': 'domainTypeId',
        'domains_included': 'domainsIncluded'
    }

    def __init__(self, asset_type_ids=None, communities_included=None, community_id=None, domain_type_id=None, domains_included=None):  # noqa: E501
        """XmlNs0BrowserLevelRequest - a model defined in Swagger"""  # noqa: E501

        self._asset_type_ids = None
        self._communities_included = None
        self._community_id = None
        self._domain_type_id = None
        self._domains_included = None
        self.discriminator = None

        if asset_type_ids is not None:
            self.asset_type_ids = asset_type_ids
        if communities_included is not None:
            self.communities_included = communities_included
        if community_id is not None:
            self.community_id = community_id
        if domain_type_id is not None:
            self.domain_type_id = domain_type_id
        if domains_included is not None:
            self.domains_included = domains_included

    @property
    def asset_type_ids(self):
        """Gets the asset_type_ids of this XmlNs0BrowserLevelRequest.  # noqa: E501

          # noqa: E501

        :return: The asset_type_ids of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_type_ids

    @asset_type_ids.setter
    def asset_type_ids(self, asset_type_ids):
        """Sets the asset_type_ids of this XmlNs0BrowserLevelRequest.

          # noqa: E501

        :param asset_type_ids: The asset_type_ids of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :type: str
        """

        self._asset_type_ids = asset_type_ids

    @property
    def communities_included(self):
        """Gets the communities_included of this XmlNs0BrowserLevelRequest.  # noqa: E501

          # noqa: E501

        :return: The communities_included of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :rtype: bool
        """
        return self._communities_included

    @communities_included.setter
    def communities_included(self, communities_included):
        """Sets the communities_included of this XmlNs0BrowserLevelRequest.

          # noqa: E501

        :param communities_included: The communities_included of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :type: bool
        """

        self._communities_included = communities_included

    @property
    def community_id(self):
        """Gets the community_id of this XmlNs0BrowserLevelRequest.  # noqa: E501

          # noqa: E501

        :return: The community_id of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :rtype: str
        """
        return self._community_id

    @community_id.setter
    def community_id(self, community_id):
        """Sets the community_id of this XmlNs0BrowserLevelRequest.

          # noqa: E501

        :param community_id: The community_id of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :type: str
        """

        self._community_id = community_id

    @property
    def domain_type_id(self):
        """Gets the domain_type_id of this XmlNs0BrowserLevelRequest.  # noqa: E501

          # noqa: E501

        :return: The domain_type_id of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain_type_id

    @domain_type_id.setter
    def domain_type_id(self, domain_type_id):
        """Sets the domain_type_id of this XmlNs0BrowserLevelRequest.

          # noqa: E501

        :param domain_type_id: The domain_type_id of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :type: str
        """

        self._domain_type_id = domain_type_id

    @property
    def domains_included(self):
        """Gets the domains_included of this XmlNs0BrowserLevelRequest.  # noqa: E501

          # noqa: E501

        :return: The domains_included of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :rtype: bool
        """
        return self._domains_included

    @domains_included.setter
    def domains_included(self, domains_included):
        """Sets the domains_included of this XmlNs0BrowserLevelRequest.

          # noqa: E501

        :param domains_included: The domains_included of this XmlNs0BrowserLevelRequest.  # noqa: E501
        :type: bool
        """

        self._domains_included = domains_included

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0BrowserLevelRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
