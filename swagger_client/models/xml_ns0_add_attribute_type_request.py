# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_attribute_kind import XmlNs0AttributeKind  # noqa: F401,E501


class XmlNs0AddAttributeTypeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_values': 'str',
        'description': 'str',
        'id': 'str',
        'is_integer': 'bool',
        'kind': 'XmlNs0AttributeKind',
        'language': 'str',
        'name': 'str',
        'statistics_enabled': 'bool'
    }

    attribute_map = {
        'allowed_values': 'allowedValues',
        'description': 'description',
        'id': 'id',
        'is_integer': 'isInteger',
        'kind': 'kind',
        'language': 'language',
        'name': 'name',
        'statistics_enabled': 'statisticsEnabled'
    }

    def __init__(self, allowed_values=None, description=None, id=None, is_integer=None, kind=None, language=None, name=None, statistics_enabled=None):  # noqa: E501
        """XmlNs0AddAttributeTypeRequest - a model defined in Swagger"""  # noqa: E501

        self._allowed_values = None
        self._description = None
        self._id = None
        self._is_integer = None
        self._kind = None
        self._language = None
        self._name = None
        self._statistics_enabled = None
        self.discriminator = None

        if allowed_values is not None:
            self.allowed_values = allowed_values
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if is_integer is not None:
            self.is_integer = is_integer
        if kind is not None:
            self.kind = kind
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if statistics_enabled is not None:
            self.statistics_enabled = statistics_enabled

    @property
    def allowed_values(self):
        """Gets the allowed_values of this XmlNs0AddAttributeTypeRequest.  # noqa: E501

        List of allowed values  # noqa: E501

        :return: The allowed_values of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this XmlNs0AddAttributeTypeRequest.

        List of allowed values  # noqa: E501

        :param allowed_values: The allowed_values of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :type: str
        """

        self._allowed_values = allowed_values

    @property
    def description(self):
        """Gets the description of this XmlNs0AddAttributeTypeRequest.  # noqa: E501

        The description of the new attribute type  # noqa: E501

        :return: The description of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XmlNs0AddAttributeTypeRequest.

        The description of the new attribute type  # noqa: E501

        :param description: The description of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 4000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `4000`")  # noqa: E501
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this XmlNs0AddAttributeTypeRequest.  # noqa: E501

        The <code>id</code> of the new attribute type. Should be unique within all attribute types. It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix  # noqa: E501

        :return: The id of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XmlNs0AddAttributeTypeRequest.

        The <code>id</code> of the new attribute type. Should be unique within all attribute types. It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix  # noqa: E501

        :param id: The id of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_integer(self):
        """Gets the is_integer of this XmlNs0AddAttributeTypeRequest.  # noqa: E501

        Whether attribute type holds integer value  # noqa: E501

        :return: The is_integer of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_integer

    @is_integer.setter
    def is_integer(self, is_integer):
        """Sets the is_integer of this XmlNs0AddAttributeTypeRequest.

        Whether attribute type holds integer value  # noqa: E501

        :param is_integer: The is_integer of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :type: bool
        """

        self._is_integer = is_integer

    @property
    def kind(self):
        """Gets the kind of this XmlNs0AddAttributeTypeRequest.  # noqa: E501

        The kind of the new attribute type  # noqa: E501

        :return: The kind of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :rtype: XmlNs0AttributeKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this XmlNs0AddAttributeTypeRequest.

        The kind of the new attribute type  # noqa: E501

        :param kind: The kind of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :type: XmlNs0AttributeKind
        """

        self._kind = kind

    @property
    def language(self):
        """Gets the language of this XmlNs0AddAttributeTypeRequest.  # noqa: E501

        The language of the new attribute type  # noqa: E501

        :return: The language of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this XmlNs0AddAttributeTypeRequest.

        The language of the new attribute type  # noqa: E501

        :param language: The language of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :type: str
        """
        if language is not None and len(language) > 255:
            raise ValueError("Invalid value for `language`, length must be less than or equal to `255`")  # noqa: E501
        if language is not None and len(language) < 0:
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `0`")  # noqa: E501

        self._language = language

    @property
    def name(self):
        """Gets the name of this XmlNs0AddAttributeTypeRequest.  # noqa: E501

        The name of the new attribute type. Should be unique within all attribute types  # noqa: E501

        :return: The name of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XmlNs0AddAttributeTypeRequest.

        The name of the new attribute type. Should be unique within all attribute types  # noqa: E501

        :param name: The name of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def statistics_enabled(self):
        """Gets the statistics_enabled of this XmlNs0AddAttributeTypeRequest.  # noqa: E501

        Whether statistics should be enabled  # noqa: E501

        :return: The statistics_enabled of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._statistics_enabled

    @statistics_enabled.setter
    def statistics_enabled(self, statistics_enabled):
        """Sets the statistics_enabled of this XmlNs0AddAttributeTypeRequest.

        Whether statistics should be enabled  # noqa: E501

        :param statistics_enabled: The statistics_enabled of this XmlNs0AddAttributeTypeRequest.  # noqa: E501
        :type: bool
        """

        self._statistics_enabled = statistics_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0AddAttributeTypeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
