# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_articulation_rule_request import XmlNs0ArticulationRuleRequest  # noqa: F401,E501
from swagger_client.models.xml_ns0_characteristic_type_assignment_reference import XmlNs0CharacteristicTypeAssignmentReference  # noqa: F401,E501


class XmlNs0AddAssignmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'articulation_rules': 'XmlNs0ArticulationRuleRequest',
        'asset_type_id': 'str',
        'characteristic_types': 'XmlNs0CharacteristicTypeAssignmentReference',
        'data_quality_rule_ids': 'str',
        'default_status_id': 'str',
        'domain_type_ids': 'str',
        'scope_id': 'str',
        'status_ids': 'str',
        'validation_rule_ids': 'str'
    }

    attribute_map = {
        'articulation_rules': 'articulationRules',
        'asset_type_id': 'assetTypeId',
        'characteristic_types': 'characteristicTypes',
        'data_quality_rule_ids': 'dataQualityRuleIds',
        'default_status_id': 'defaultStatusId',
        'domain_type_ids': 'domainTypeIds',
        'scope_id': 'scopeId',
        'status_ids': 'statusIds',
        'validation_rule_ids': 'validationRuleIds'
    }

    def __init__(self, articulation_rules=None, asset_type_id=None, characteristic_types=None, data_quality_rule_ids=None, default_status_id=None, domain_type_ids=None, scope_id=None, status_ids=None, validation_rule_ids=None):  # noqa: E501
        """XmlNs0AddAssignmentRequest - a model defined in Swagger"""  # noqa: E501

        self._articulation_rules = None
        self._asset_type_id = None
        self._characteristic_types = None
        self._data_quality_rule_ids = None
        self._default_status_id = None
        self._domain_type_ids = None
        self._scope_id = None
        self._status_ids = None
        self._validation_rule_ids = None
        self.discriminator = None

        if articulation_rules is not None:
            self.articulation_rules = articulation_rules
        if asset_type_id is not None:
            self.asset_type_id = asset_type_id
        if characteristic_types is not None:
            self.characteristic_types = characteristic_types
        if data_quality_rule_ids is not None:
            self.data_quality_rule_ids = data_quality_rule_ids
        if default_status_id is not None:
            self.default_status_id = default_status_id
        if domain_type_ids is not None:
            self.domain_type_ids = domain_type_ids
        if scope_id is not None:
            self.scope_id = scope_id
        if status_ids is not None:
            self.status_ids = status_ids
        if validation_rule_ids is not None:
            self.validation_rule_ids = validation_rule_ids

    @property
    def articulation_rules(self):
        """Gets the articulation_rules of this XmlNs0AddAssignmentRequest.  # noqa: E501

        The list of the articulation rules  # noqa: E501

        :return: The articulation_rules of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :rtype: XmlNs0ArticulationRuleRequest
        """
        return self._articulation_rules

    @articulation_rules.setter
    def articulation_rules(self, articulation_rules):
        """Sets the articulation_rules of this XmlNs0AddAssignmentRequest.

        The list of the articulation rules  # noqa: E501

        :param articulation_rules: The articulation_rules of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :type: XmlNs0ArticulationRuleRequest
        """

        self._articulation_rules = articulation_rules

    @property
    def asset_type_id(self):
        """Gets the asset_type_id of this XmlNs0AddAssignmentRequest.  # noqa: E501

        The <code>id</code> of the asset type corresponding to the assignment  # noqa: E501

        :return: The asset_type_id of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_type_id

    @asset_type_id.setter
    def asset_type_id(self, asset_type_id):
        """Sets the asset_type_id of this XmlNs0AddAssignmentRequest.

        The <code>id</code> of the asset type corresponding to the assignment  # noqa: E501

        :param asset_type_id: The asset_type_id of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :type: str
        """

        self._asset_type_id = asset_type_id

    @property
    def characteristic_types(self):
        """Gets the characteristic_types of this XmlNs0AddAssignmentRequest.  # noqa: E501

        The list of the references to characteristic types corresponding to the assignment  # noqa: E501

        :return: The characteristic_types of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :rtype: XmlNs0CharacteristicTypeAssignmentReference
        """
        return self._characteristic_types

    @characteristic_types.setter
    def characteristic_types(self, characteristic_types):
        """Sets the characteristic_types of this XmlNs0AddAssignmentRequest.

        The list of the references to characteristic types corresponding to the assignment  # noqa: E501

        :param characteristic_types: The characteristic_types of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :type: XmlNs0CharacteristicTypeAssignmentReference
        """

        self._characteristic_types = characteristic_types

    @property
    def data_quality_rule_ids(self):
        """Gets the data_quality_rule_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501

        The list of <code>id</code>s of the data quality rules  # noqa: E501

        :return: The data_quality_rule_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_quality_rule_ids

    @data_quality_rule_ids.setter
    def data_quality_rule_ids(self, data_quality_rule_ids):
        """Sets the data_quality_rule_ids of this XmlNs0AddAssignmentRequest.

        The list of <code>id</code>s of the data quality rules  # noqa: E501

        :param data_quality_rule_ids: The data_quality_rule_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :type: str
        """

        self._data_quality_rule_ids = data_quality_rule_ids

    @property
    def default_status_id(self):
        """Gets the default_status_id of this XmlNs0AddAssignmentRequest.  # noqa: E501

        The <code>id</code> of the default status for the asset type  # noqa: E501

        :return: The default_status_id of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_status_id

    @default_status_id.setter
    def default_status_id(self, default_status_id):
        """Sets the default_status_id of this XmlNs0AddAssignmentRequest.

        The <code>id</code> of the default status for the asset type  # noqa: E501

        :param default_status_id: The default_status_id of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :type: str
        """

        self._default_status_id = default_status_id

    @property
    def domain_type_ids(self):
        """Gets the domain_type_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501

        The list of <code>id</code>s of the domain types  # noqa: E501

        :return: The domain_type_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain_type_ids

    @domain_type_ids.setter
    def domain_type_ids(self, domain_type_ids):
        """Sets the domain_type_ids of this XmlNs0AddAssignmentRequest.

        The list of <code>id</code>s of the domain types  # noqa: E501

        :param domain_type_ids: The domain_type_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :type: str
        """

        self._domain_type_ids = domain_type_ids

    @property
    def scope_id(self):
        """Gets the scope_id of this XmlNs0AddAssignmentRequest.  # noqa: E501

        The <code>id</code> of the scope the assignment corresponds to  # noqa: E501

        :return: The scope_id of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this XmlNs0AddAssignmentRequest.

        The <code>id</code> of the scope the assignment corresponds to  # noqa: E501

        :param scope_id: The scope_id of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    @property
    def status_ids(self):
        """Gets the status_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501

        The list of <code>id</code>s of the statuses  # noqa: E501

        :return: The status_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._status_ids

    @status_ids.setter
    def status_ids(self, status_ids):
        """Sets the status_ids of this XmlNs0AddAssignmentRequest.

        The list of <code>id</code>s of the statuses  # noqa: E501

        :param status_ids: The status_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :type: str
        """
        if status_ids is not None and len(status_ids) > 2147483647:
            raise ValueError("Invalid value for `status_ids`, length must be less than or equal to `2147483647`")  # noqa: E501
        if status_ids is not None and len(status_ids) < 1:
            raise ValueError("Invalid value for `status_ids`, length must be greater than or equal to `1`")  # noqa: E501

        self._status_ids = status_ids

    @property
    def validation_rule_ids(self):
        """Gets the validation_rule_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501

        The list of <code>id</code>s of the validation rules  # noqa: E501

        :return: The validation_rule_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._validation_rule_ids

    @validation_rule_ids.setter
    def validation_rule_ids(self, validation_rule_ids):
        """Sets the validation_rule_ids of this XmlNs0AddAssignmentRequest.

        The list of <code>id</code>s of the validation rules  # noqa: E501

        :param validation_rule_ids: The validation_rule_ids of this XmlNs0AddAssignmentRequest.  # noqa: E501
        :type: str
        """

        self._validation_rule_ids = validation_rule_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0AddAssignmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
