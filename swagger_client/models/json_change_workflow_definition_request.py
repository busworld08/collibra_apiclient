# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.json_workflow_business_item_type import JsonWorkflowBusinessItemType  # noqa: F401,E501
from swagger_client.models.json_workflow_exclusivity import JsonWorkflowExclusivity  # noqa: F401,E501
from swagger_client.models.json_workflow_start_event_type import JsonWorkflowStartEventType  # noqa: F401,E501


class JsonChangeWorkflowDefinitionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration_variables': 'dict(str, str)',
        'start_events': 'list[JsonWorkflowStartEventType]',
        'business_item_resource_type': 'JsonWorkflowBusinessItemType',
        'exclusivity': 'JsonWorkflowExclusivity',
        'guest_user_accessible': 'bool',
        'registered_user_accessible': 'bool',
        'candidate_user_check_disabled': 'bool',
        'start_label': 'str',
        'start_role_ids': 'list[str]',
        'stop_role_ids': 'list[str]',
        'reassign_role_ids': 'list[str]'
    }

    attribute_map = {
        'configuration_variables': 'configurationVariables',
        'start_events': 'startEvents',
        'business_item_resource_type': 'businessItemResourceType',
        'exclusivity': 'exclusivity',
        'guest_user_accessible': 'guestUserAccessible',
        'registered_user_accessible': 'registeredUserAccessible',
        'candidate_user_check_disabled': 'candidateUserCheckDisabled',
        'start_label': 'startLabel',
        'start_role_ids': 'startRoleIds',
        'stop_role_ids': 'stopRoleIds',
        'reassign_role_ids': 'reassignRoleIds'
    }

    def __init__(self, configuration_variables=None, start_events=None, business_item_resource_type=None, exclusivity=None, guest_user_accessible=None, registered_user_accessible=None, candidate_user_check_disabled=None, start_label=None, start_role_ids=None, stop_role_ids=None, reassign_role_ids=None):  # noqa: E501
        """JsonChangeWorkflowDefinitionRequest - a model defined in Swagger"""  # noqa: E501

        self._configuration_variables = None
        self._start_events = None
        self._business_item_resource_type = None
        self._exclusivity = None
        self._guest_user_accessible = None
        self._registered_user_accessible = None
        self._candidate_user_check_disabled = None
        self._start_label = None
        self._start_role_ids = None
        self._stop_role_ids = None
        self._reassign_role_ids = None
        self.discriminator = None

        if configuration_variables is not None:
            self.configuration_variables = configuration_variables
        if start_events is not None:
            self.start_events = start_events
        if business_item_resource_type is not None:
            self.business_item_resource_type = business_item_resource_type
        if exclusivity is not None:
            self.exclusivity = exclusivity
        if guest_user_accessible is not None:
            self.guest_user_accessible = guest_user_accessible
        if registered_user_accessible is not None:
            self.registered_user_accessible = registered_user_accessible
        if candidate_user_check_disabled is not None:
            self.candidate_user_check_disabled = candidate_user_check_disabled
        if start_label is not None:
            self.start_label = start_label
        if start_role_ids is not None:
            self.start_role_ids = start_role_ids
        if stop_role_ids is not None:
            self.stop_role_ids = stop_role_ids
        if reassign_role_ids is not None:
            self.reassign_role_ids = reassign_role_ids

    @property
    def configuration_variables(self):
        """Gets the configuration_variables of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        The configuration variables  # noqa: E501

        :return: The configuration_variables of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._configuration_variables

    @configuration_variables.setter
    def configuration_variables(self, configuration_variables):
        """Sets the configuration_variables of this JsonChangeWorkflowDefinitionRequest.

        The configuration variables  # noqa: E501

        :param configuration_variables: The configuration_variables of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._configuration_variables = configuration_variables

    @property
    def start_events(self):
        """Gets the start_events of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        The list of workflow start event types  # noqa: E501

        :return: The start_events of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: list[JsonWorkflowStartEventType]
        """
        return self._start_events

    @start_events.setter
    def start_events(self, start_events):
        """Sets the start_events of this JsonChangeWorkflowDefinitionRequest.

        The list of workflow start event types  # noqa: E501

        :param start_events: The start_events of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: list[JsonWorkflowStartEventType]
        """

        self._start_events = start_events

    @property
    def business_item_resource_type(self):
        """Gets the business_item_resource_type of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        The type of the business item corresponding to the workflow  # noqa: E501

        :return: The business_item_resource_type of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: JsonWorkflowBusinessItemType
        """
        return self._business_item_resource_type

    @business_item_resource_type.setter
    def business_item_resource_type(self, business_item_resource_type):
        """Sets the business_item_resource_type of this JsonChangeWorkflowDefinitionRequest.

        The type of the business item corresponding to the workflow  # noqa: E501

        :param business_item_resource_type: The business_item_resource_type of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: JsonWorkflowBusinessItemType
        """

        self._business_item_resource_type = business_item_resource_type

    @property
    def exclusivity(self):
        """Gets the exclusivity of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        Defines the number of times a resource workflow is able to be start (see WorkflowExclusivity)  # noqa: E501

        :return: The exclusivity of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: JsonWorkflowExclusivity
        """
        return self._exclusivity

    @exclusivity.setter
    def exclusivity(self, exclusivity):
        """Sets the exclusivity of this JsonChangeWorkflowDefinitionRequest.

        Defines the number of times a resource workflow is able to be start (see WorkflowExclusivity)  # noqa: E501

        :param exclusivity: The exclusivity of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: JsonWorkflowExclusivity
        """

        self._exclusivity = exclusivity

    @property
    def guest_user_accessible(self):
        """Gets the guest_user_accessible of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        Whether the workflow should be accessible by the guest user  # noqa: E501

        :return: The guest_user_accessible of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._guest_user_accessible

    @guest_user_accessible.setter
    def guest_user_accessible(self, guest_user_accessible):
        """Sets the guest_user_accessible of this JsonChangeWorkflowDefinitionRequest.

        Whether the workflow should be accessible by the guest user  # noqa: E501

        :param guest_user_accessible: The guest_user_accessible of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._guest_user_accessible = guest_user_accessible

    @property
    def registered_user_accessible(self):
        """Gets the registered_user_accessible of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        Whether the workflow should be accessible by the registered user  # noqa: E501

        :return: The registered_user_accessible of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._registered_user_accessible

    @registered_user_accessible.setter
    def registered_user_accessible(self, registered_user_accessible):
        """Sets the registered_user_accessible of this JsonChangeWorkflowDefinitionRequest.

        Whether the workflow should be accessible by the registered user  # noqa: E501

        :param registered_user_accessible: The registered_user_accessible of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._registered_user_accessible = registered_user_accessible

    @property
    def candidate_user_check_disabled(self):
        """Gets the candidate_user_check_disabled of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        Whether the candidate user check for the workflow should be disabled  # noqa: E501

        :return: The candidate_user_check_disabled of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._candidate_user_check_disabled

    @candidate_user_check_disabled.setter
    def candidate_user_check_disabled(self, candidate_user_check_disabled):
        """Sets the candidate_user_check_disabled of this JsonChangeWorkflowDefinitionRequest.

        Whether the candidate user check for the workflow should be disabled  # noqa: E501

        :param candidate_user_check_disabled: The candidate_user_check_disabled of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._candidate_user_check_disabled = candidate_user_check_disabled

    @property
    def start_label(self):
        """Gets the start_label of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        The start label of the workflow  # noqa: E501

        :return: The start_label of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_label

    @start_label.setter
    def start_label(self, start_label):
        """Sets the start_label of this JsonChangeWorkflowDefinitionRequest.

        The start label of the workflow  # noqa: E501

        :param start_label: The start_label of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._start_label = start_label

    @property
    def start_role_ids(self):
        """Gets the start_role_ids of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        The list of <code>id</code>s identifying the roles allowing to start the workflow  # noqa: E501

        :return: The start_role_ids of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._start_role_ids

    @start_role_ids.setter
    def start_role_ids(self, start_role_ids):
        """Sets the start_role_ids of this JsonChangeWorkflowDefinitionRequest.

        The list of <code>id</code>s identifying the roles allowing to start the workflow  # noqa: E501

        :param start_role_ids: The start_role_ids of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: list[str]
        """

        self._start_role_ids = start_role_ids

    @property
    def stop_role_ids(self):
        """Gets the stop_role_ids of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        The list of <code>id</code>s identifying the roles allowing to stop the workflow  # noqa: E501

        :return: The stop_role_ids of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._stop_role_ids

    @stop_role_ids.setter
    def stop_role_ids(self, stop_role_ids):
        """Sets the stop_role_ids of this JsonChangeWorkflowDefinitionRequest.

        The list of <code>id</code>s identifying the roles allowing to stop the workflow  # noqa: E501

        :param stop_role_ids: The stop_role_ids of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: list[str]
        """

        self._stop_role_ids = stop_role_ids

    @property
    def reassign_role_ids(self):
        """Gets the reassign_role_ids of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501

        The list of <code>id</code>s identifying the roles allowing to reassign the workflow  # noqa: E501

        :return: The reassign_role_ids of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._reassign_role_ids

    @reassign_role_ids.setter
    def reassign_role_ids(self, reassign_role_ids):
        """Sets the reassign_role_ids of this JsonChangeWorkflowDefinitionRequest.

        The list of <code>id</code>s identifying the roles allowing to reassign the workflow  # noqa: E501

        :param reassign_role_ids: The reassign_role_ids of this JsonChangeWorkflowDefinitionRequest.  # noqa: E501
        :type: list[str]
        """

        self._reassign_role_ids = reassign_role_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonChangeWorkflowDefinitionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
