# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JsonPermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ATTACHMENT_ADD = "ATTACHMENT_ADD"
    ATTACHMENT_CHANGE = "ATTACHMENT_CHANGE"
    ATTACHMENT_REMOVE = "ATTACHMENT_REMOVE"
    COMMENT_ADD = "COMMENT_ADD"
    COMMENT_CHANGE = "COMMENT_CHANGE"
    COMMENT_REMOVE = "COMMENT_REMOVE"
    COMMUNITY_ADD = "COMMUNITY_ADD"
    COMMUNITY_CHANGE = "COMMUNITY_CHANGE"
    COMMUNITY_REMOVE = "COMMUNITY_REMOVE"
    COMMUNITY_RESPONSIBILITY_ADD = "COMMUNITY_RESPONSIBILITY_ADD"
    COMMUNITY_RESPONSIBILITY_CHANGE = "COMMUNITY_RESPONSIBILITY_CHANGE"
    COMMUNITY_RESPONSIBILITY_REMOVE = "COMMUNITY_RESPONSIBILITY_REMOVE"
    DOMAIN_ADD = "DOMAIN_ADD"
    DOMAIN_CHANGE = "DOMAIN_CHANGE"
    DOMAIN_REMOVE = "DOMAIN_REMOVE"
    DOMAIN_RESPONSIBILITY_ADD = "DOMAIN_RESPONSIBILITY_ADD"
    DOMAIN_RESPONSIBILITY_CHANGE = "DOMAIN_RESPONSIBILITY_CHANGE"
    DOMAIN_RESPONSIBILITY_REMOVE = "DOMAIN_RESPONSIBILITY_REMOVE"
    WORKFLOW_MANAGE = "WORKFLOW_MANAGE"
    ASSET_ADD = "ASSET_ADD"
    ASSET_CHANGE = "ASSET_CHANGE"
    ASSET_REMOVE = "ASSET_REMOVE"
    ASSET_STATUS_CHANGE = "ASSET_STATUS_CHANGE"
    ASSET_TYPE_CHANGE = "ASSET_TYPE_CHANGE"
    ASSET_TAG_CHANGE = "ASSET_TAG_CHANGE"
    ASSET_ATTRIBUTE_ADD = "ASSET_ATTRIBUTE_ADD"
    ASSET_ATTRIBUTE_CHANGE = "ASSET_ATTRIBUTE_CHANGE"
    ASSET_ATTRIBUTE_REMOVE = "ASSET_ATTRIBUTE_REMOVE"
    ASSET_RESPONSIBILITY_ADD = "ASSET_RESPONSIBILITY_ADD"
    ASSET_RESPONSIBILITY_CHANGE = "ASSET_RESPONSIBILITY_CHANGE"
    ASSET_RESPONSIBILITY_REMOVE = "ASSET_RESPONSIBILITY_REMOVE"
    VIEW_PERMISSIONS_CHANGE = "VIEW_PERMISSIONS_CHANGE"
    BUSINESS_SEMANTICS_GLOSSARY = "BUSINESS_SEMANTICS_GLOSSARY"
    REFERENCE_DATA_MANAGER = "REFERENCE_DATA_MANAGER"
    DATA_STEWARDSHIP_MANAGER = "DATA_STEWARDSHIP_MANAGER"
    SYSTEM_ADMINISTRATION = "SYSTEM_ADMINISTRATION"
    DATA_HELPDESK = "DATA_HELPDESK"
    POLICY_MANAGER = "POLICY_MANAGER"
    DATA_DICTIONARY = "DATA_DICTIONARY"
    CATALOG = "CATALOG"
    WORKFLOW_MANAGE_ALL = "WORKFLOW_MANAGE_ALL"
    WORKFLOW_MESSAGE_EVENTS_USE = "WORKFLOW_MESSAGE_EVENTS_USE"
    VIEW_PERMISSIONS_VIEW_ALL = "VIEW_PERMISSIONS_VIEW_ALL"
    VIEW_MANAGE = "VIEW_MANAGE"
    VIEW_SHARE = "VIEW_SHARE"
    VIEW_MANAGE_ALL = "VIEW_MANAGE_ALL"
    ADVANCED_DATA_TYPE_ADD = "ADVANCED_DATA_TYPE_ADD"
    ADVANCED_DATA_TYPE_EDIT = "ADVANCED_DATA_TYPE_EDIT"
    ADVANCED_DATA_TYPE_REMOVE = "ADVANCED_DATA_TYPE_REMOVE"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """JsonPermission - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonPermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
