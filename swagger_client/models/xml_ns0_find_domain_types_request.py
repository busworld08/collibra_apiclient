# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_match_mode import XmlNs0MatchMode  # noqa: F401,E501
from swagger_client.models.xml_ns0_paged_request import XmlNs0PagedRequest  # noqa: F401,E501


class XmlNs0FindDomainTypesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'float',
        'offset': 'float',
        'exclude_meta': 'bool',
        'name': 'str',
        'name_match_mode': 'XmlNs0MatchMode',
        'parent_id': 'str',
        'top_level': 'bool'
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
        'exclude_meta': 'excludeMeta',
        'name': 'name',
        'name_match_mode': 'nameMatchMode',
        'parent_id': 'parentId',
        'top_level': 'topLevel'
    }

    def __init__(self, limit=None, offset=None, exclude_meta=None, name=None, name_match_mode=None, parent_id=None, top_level=None):  # noqa: E501
        """XmlNs0FindDomainTypesRequest - a model defined in Swagger"""  # noqa: E501

        self._limit = None
        self._offset = None
        self._exclude_meta = None
        self._name = None
        self._name_match_mode = None
        self._parent_id = None
        self._top_level = None
        self.discriminator = None

        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if exclude_meta is not None:
            self.exclude_meta = exclude_meta
        if name is not None:
            self.name = name
        if name_match_mode is not None:
            self.name_match_mode = name_match_mode
        if parent_id is not None:
            self.parent_id = parent_id
        if top_level is not None:
            self.top_level = top_level

    @property
    def limit(self):
        """Gets the limit of this XmlNs0FindDomainTypesRequest.  # noqa: E501

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :return: The limit of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this XmlNs0FindDomainTypesRequest.

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :param limit: The limit of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this XmlNs0FindDomainTypesRequest.  # noqa: E501

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :return: The offset of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this XmlNs0FindDomainTypesRequest.

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :param offset: The offset of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def exclude_meta(self):
        """Gets the exclude_meta of this XmlNs0FindDomainTypesRequest.  # noqa: E501

        Whether the meta domain types should be excluded from search or not  # noqa: E501

        :return: The exclude_meta of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_meta

    @exclude_meta.setter
    def exclude_meta(self, exclude_meta):
        """Sets the exclude_meta of this XmlNs0FindDomainTypesRequest.

        Whether the meta domain types should be excluded from search or not  # noqa: E501

        :param exclude_meta: The exclude_meta of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :type: bool
        """

        self._exclude_meta = exclude_meta

    @property
    def name(self):
        """Gets the name of this XmlNs0FindDomainTypesRequest.  # noqa: E501

        The name of the domain type to search for  # noqa: E501

        :return: The name of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XmlNs0FindDomainTypesRequest.

        The name of the domain type to search for  # noqa: E501

        :param name: The name of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_match_mode(self):
        """Gets the name_match_mode of this XmlNs0FindDomainTypesRequest.  # noqa: E501

        The match mode used to compare <code>name</code>  # noqa: E501

        :return: The name_match_mode of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :rtype: XmlNs0MatchMode
        """
        return self._name_match_mode

    @name_match_mode.setter
    def name_match_mode(self, name_match_mode):
        """Sets the name_match_mode of this XmlNs0FindDomainTypesRequest.

        The match mode used to compare <code>name</code>  # noqa: E501

        :param name_match_mode: The name_match_mode of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :type: XmlNs0MatchMode
        """

        self._name_match_mode = name_match_mode

    @property
    def parent_id(self):
        """Gets the parent_id of this XmlNs0FindDomainTypesRequest.  # noqa: E501

        The <code>id</code> of the parent to find the domain types in  # noqa: E501

        :return: The parent_id of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this XmlNs0FindDomainTypesRequest.

        The <code>id</code> of the parent to find the domain types in  # noqa: E501

        :param parent_id: The parent_id of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def top_level(self):
        """Gets the top_level of this XmlNs0FindDomainTypesRequest.  # noqa: E501

        Whether only top level domain types should be searched or not  # noqa: E501

        :return: The top_level of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._top_level

    @top_level.setter
    def top_level(self, top_level):
        """Sets the top_level of this XmlNs0FindDomainTypesRequest.

        Whether only top level domain types should be searched or not  # noqa: E501

        :param top_level: The top_level of this XmlNs0FindDomainTypesRequest.  # noqa: E501
        :type: bool
        """

        self._top_level = top_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0FindDomainTypesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
