# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.json_match_mode import JsonMatchMode  # noqa: F401,E501
from swagger_client.models.json_paged_request import JsonPagedRequest  # noqa: F401,E501


class JsonFindUserGroupsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offset': 'float',
        'limit': 'float',
        'name': 'str',
        'name_match_mode': 'JsonMatchMode',
        'user_id': 'str',
        'include_everyone': 'bool'
    }

    attribute_map = {
        'offset': 'offset',
        'limit': 'limit',
        'name': 'name',
        'name_match_mode': 'nameMatchMode',
        'user_id': 'userId',
        'include_everyone': 'includeEveryone'
    }

    def __init__(self, offset=None, limit=None, name=None, name_match_mode=None, user_id=None, include_everyone=None):  # noqa: E501
        """JsonFindUserGroupsRequest - a model defined in Swagger"""  # noqa: E501

        self._offset = None
        self._limit = None
        self._name = None
        self._name_match_mode = None
        self._user_id = None
        self._include_everyone = None
        self.discriminator = None

        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if name is not None:
            self.name = name
        if name_match_mode is not None:
            self.name_match_mode = name_match_mode
        if user_id is not None:
            self.user_id = user_id
        if include_everyone is not None:
            self.include_everyone = include_everyone

    @property
    def offset(self):
        """Gets the offset of this JsonFindUserGroupsRequest.  # noqa: E501

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :return: The offset of this JsonFindUserGroupsRequest.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this JsonFindUserGroupsRequest.

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :param offset: The offset of this JsonFindUserGroupsRequest.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this JsonFindUserGroupsRequest.  # noqa: E501

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :return: The limit of this JsonFindUserGroupsRequest.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this JsonFindUserGroupsRequest.

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :param limit: The limit of this JsonFindUserGroupsRequest.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def name(self):
        """Gets the name of this JsonFindUserGroupsRequest.  # noqa: E501

        The name of the user group  # noqa: E501

        :return: The name of this JsonFindUserGroupsRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JsonFindUserGroupsRequest.

        The name of the user group  # noqa: E501

        :param name: The name of this JsonFindUserGroupsRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_match_mode(self):
        """Gets the name_match_mode of this JsonFindUserGroupsRequest.  # noqa: E501

        The match mode used to compare <code>name</code>.  # noqa: E501

        :return: The name_match_mode of this JsonFindUserGroupsRequest.  # noqa: E501
        :rtype: JsonMatchMode
        """
        return self._name_match_mode

    @name_match_mode.setter
    def name_match_mode(self, name_match_mode):
        """Sets the name_match_mode of this JsonFindUserGroupsRequest.

        The match mode used to compare <code>name</code>.  # noqa: E501

        :param name_match_mode: The name_match_mode of this JsonFindUserGroupsRequest.  # noqa: E501
        :type: JsonMatchMode
        """

        self._name_match_mode = name_match_mode

    @property
    def user_id(self):
        """Gets the user_id of this JsonFindUserGroupsRequest.  # noqa: E501

        The <code>id</code> of the user who should belong to searched user groups  # noqa: E501

        :return: The user_id of this JsonFindUserGroupsRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JsonFindUserGroupsRequest.

        The <code>id</code> of the user who should belong to searched user groups  # noqa: E501

        :param user_id: The user_id of this JsonFindUserGroupsRequest.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def include_everyone(self):
        """Gets the include_everyone of this JsonFindUserGroupsRequest.  # noqa: E501

          # noqa: E501

        :return: The include_everyone of this JsonFindUserGroupsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_everyone

    @include_everyone.setter
    def include_everyone(self, include_everyone):
        """Sets the include_everyone of this JsonFindUserGroupsRequest.

          # noqa: E501

        :param include_everyone: The include_everyone of this JsonFindUserGroupsRequest.  # noqa: E501
        :type: bool
        """

        self._include_everyone = include_everyone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonFindUserGroupsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
