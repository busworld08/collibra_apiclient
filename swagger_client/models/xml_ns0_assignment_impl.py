# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_resource_impl import XmlNs0ResourceImpl  # noqa: F401,E501
from swagger_client.models.xml_ns0_resource_type import XmlNs0ResourceType  # noqa: F401,E501


class XmlNs0AssignmentImpl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_by': 'str',
        'created_on': 'float',
        'last_modified_by': 'str',
        'last_modified_on': 'float',
        'resource_type': 'XmlNs0ResourceType',
        'system': 'bool',
        'articulation_rules': 'object',
        'asset_type': 'object',
        'characteristic_types': 'object',
        'data_quality_rules': 'object',
        'default_status_id': 'str',
        'domain_types': 'object',
        'scope': 'object',
        'statuses': 'object',
        'validation_rules': 'object'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_on': 'lastModifiedOn',
        'resource_type': 'resourceType',
        'system': 'system',
        'articulation_rules': 'articulationRules',
        'asset_type': 'assetType',
        'characteristic_types': 'characteristicTypes',
        'data_quality_rules': 'dataQualityRules',
        'default_status_id': 'defaultStatusId',
        'domain_types': 'domainTypes',
        'scope': 'scope',
        'statuses': 'statuses',
        'validation_rules': 'validationRules'
    }

    def __init__(self, id=None, created_by=None, created_on=None, last_modified_by=None, last_modified_on=None, resource_type=None, system=None, articulation_rules=None, asset_type=None, characteristic_types=None, data_quality_rules=None, default_status_id=None, domain_types=None, scope=None, statuses=None, validation_rules=None):  # noqa: E501
        """XmlNs0AssignmentImpl - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._created_by = None
        self._created_on = None
        self._last_modified_by = None
        self._last_modified_on = None
        self._resource_type = None
        self._system = None
        self._articulation_rules = None
        self._asset_type = None
        self._characteristic_types = None
        self._data_quality_rules = None
        self._default_status_id = None
        self._domain_types = None
        self._scope = None
        self._statuses = None
        self._validation_rules = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if resource_type is not None:
            self.resource_type = resource_type
        if system is not None:
            self.system = system
        if articulation_rules is not None:
            self.articulation_rules = articulation_rules
        if asset_type is not None:
            self.asset_type = asset_type
        if characteristic_types is not None:
            self.characteristic_types = characteristic_types
        if data_quality_rules is not None:
            self.data_quality_rules = data_quality_rules
        if default_status_id is not None:
            self.default_status_id = default_status_id
        if domain_types is not None:
            self.domain_types = domain_types
        if scope is not None:
            self.scope = scope
        if statuses is not None:
            self.statuses = statuses
        if validation_rules is not None:
            self.validation_rules = validation_rules

    @property
    def id(self):
        """Gets the id of this XmlNs0AssignmentImpl.  # noqa: E501

        The <code>id</code> of the represented object (entity)  # noqa: E501

        :return: The id of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XmlNs0AssignmentImpl.

        The <code>id</code> of the represented object (entity)  # noqa: E501

        :param id: The id of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this XmlNs0AssignmentImpl.  # noqa: E501

        The id of the user that created this resource  # noqa: E501

        :return: The created_by of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this XmlNs0AssignmentImpl.

        The id of the user that created this resource  # noqa: E501

        :param created_by: The created_by of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this XmlNs0AssignmentImpl.  # noqa: E501

        The timestamp (in UTC time standard) of the creation of this resource  # noqa: E501

        :return: The created_on of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: float
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this XmlNs0AssignmentImpl.

        The timestamp (in UTC time standard) of the creation of this resource  # noqa: E501

        :param created_on: The created_on of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: float
        """

        self._created_on = created_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this XmlNs0AssignmentImpl.  # noqa: E501

        The id of the user who modified this resource the last time  # noqa: E501

        :return: The last_modified_by of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this XmlNs0AssignmentImpl.

        The id of the user who modified this resource the last time  # noqa: E501

        :param last_modified_by: The last_modified_by of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this XmlNs0AssignmentImpl.  # noqa: E501

        The timestamp (in UTC time standard) of the last modification of this resource  # noqa: E501

        :return: The last_modified_on of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: float
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this XmlNs0AssignmentImpl.

        The timestamp (in UTC time standard) of the last modification of this resource  # noqa: E501

        :param last_modified_on: The last_modified_on of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: float
        """

        self._last_modified_on = last_modified_on

    @property
    def resource_type(self):
        """Gets the resource_type of this XmlNs0AssignmentImpl.  # noqa: E501

        The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance]  # noqa: E501

        :return: The resource_type of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: XmlNs0ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this XmlNs0AssignmentImpl.

        The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance]  # noqa: E501

        :param resource_type: The resource_type of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: XmlNs0ResourceType
        """

        self._resource_type = resource_type

    @property
    def system(self):
        """Gets the system of this XmlNs0AssignmentImpl.  # noqa: E501

        Whether this is a system resource or not  # noqa: E501

        :return: The system of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this XmlNs0AssignmentImpl.

        Whether this is a system resource or not  # noqa: E501

        :param system: The system of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def articulation_rules(self):
        """Gets the articulation_rules of this XmlNs0AssignmentImpl.  # noqa: E501

        The list of articulation rules applying with the assignment  # noqa: E501

        :return: The articulation_rules of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: object
        """
        return self._articulation_rules

    @articulation_rules.setter
    def articulation_rules(self, articulation_rules):
        """Sets the articulation_rules of this XmlNs0AssignmentImpl.

        The list of articulation rules applying with the assignment  # noqa: E501

        :param articulation_rules: The articulation_rules of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: object
        """

        self._articulation_rules = articulation_rules

    @property
    def asset_type(self):
        """Gets the asset_type of this XmlNs0AssignmentImpl.  # noqa: E501

        The reference to the asset type the assignment applies to  # noqa: E501

        :return: The asset_type of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: object
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this XmlNs0AssignmentImpl.

        The reference to the asset type the assignment applies to  # noqa: E501

        :param asset_type: The asset_type of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: object
        """

        self._asset_type = asset_type

    @property
    def characteristic_types(self):
        """Gets the characteristic_types of this XmlNs0AssignmentImpl.  # noqa: E501

        The list of assigned characteristic types (attribute types, relation types and complex relation types)  # noqa: E501

        :return: The characteristic_types of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: object
        """
        return self._characteristic_types

    @characteristic_types.setter
    def characteristic_types(self, characteristic_types):
        """Sets the characteristic_types of this XmlNs0AssignmentImpl.

        The list of assigned characteristic types (attribute types, relation types and complex relation types)  # noqa: E501

        :param characteristic_types: The characteristic_types of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: object
        """

        self._characteristic_types = characteristic_types

    @property
    def data_quality_rules(self):
        """Gets the data_quality_rules of this XmlNs0AssignmentImpl.  # noqa: E501

        The list of references to data quality rules applying with the assignment  # noqa: E501

        :return: The data_quality_rules of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: object
        """
        return self._data_quality_rules

    @data_quality_rules.setter
    def data_quality_rules(self, data_quality_rules):
        """Sets the data_quality_rules of this XmlNs0AssignmentImpl.

        The list of references to data quality rules applying with the assignment  # noqa: E501

        :param data_quality_rules: The data_quality_rules of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: object
        """

        self._data_quality_rules = data_quality_rules

    @property
    def default_status_id(self):
        """Gets the default_status_id of this XmlNs0AssignmentImpl.  # noqa: E501

        The <code>id</code> of the default status  # noqa: E501

        :return: The default_status_id of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: str
        """
        return self._default_status_id

    @default_status_id.setter
    def default_status_id(self, default_status_id):
        """Sets the default_status_id of this XmlNs0AssignmentImpl.

        The <code>id</code> of the default status  # noqa: E501

        :param default_status_id: The default_status_id of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: str
        """

        self._default_status_id = default_status_id

    @property
    def domain_types(self):
        """Gets the domain_types of this XmlNs0AssignmentImpl.  # noqa: E501

        The list of references to domain types which the assignment refers to  # noqa: E501

        :return: The domain_types of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: object
        """
        return self._domain_types

    @domain_types.setter
    def domain_types(self, domain_types):
        """Sets the domain_types of this XmlNs0AssignmentImpl.

        The list of references to domain types which the assignment refers to  # noqa: E501

        :param domain_types: The domain_types of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: object
        """

        self._domain_types = domain_types

    @property
    def scope(self):
        """Gets the scope of this XmlNs0AssignmentImpl.  # noqa: E501

        The scope contained by the assignment  # noqa: E501

        :return: The scope of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: object
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this XmlNs0AssignmentImpl.

        The scope contained by the assignment  # noqa: E501

        :param scope: The scope of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: object
        """

        self._scope = scope

    @property
    def statuses(self):
        """Gets the statuses of this XmlNs0AssignmentImpl.  # noqa: E501

        The list of references to the statuses  # noqa: E501

        :return: The statuses of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: object
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this XmlNs0AssignmentImpl.

        The list of references to the statuses  # noqa: E501

        :param statuses: The statuses of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: object
        """

        self._statuses = statuses

    @property
    def validation_rules(self):
        """Gets the validation_rules of this XmlNs0AssignmentImpl.  # noqa: E501

        The list of references to validation rules applying with the assignment  # noqa: E501

        :return: The validation_rules of this XmlNs0AssignmentImpl.  # noqa: E501
        :rtype: object
        """
        return self._validation_rules

    @validation_rules.setter
    def validation_rules(self, validation_rules):
        """Sets the validation_rules of this XmlNs0AssignmentImpl.

        The list of references to validation rules applying with the assignment  # noqa: E501

        :param validation_rules: The validation_rules of this XmlNs0AssignmentImpl.  # noqa: E501
        :type: object
        """

        self._validation_rules = validation_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0AssignmentImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
