# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.json_file_reference import JsonFileReference  # noqa: F401,E501
from swagger_client.models.json_resource_reference_impl import JsonResourceReferenceImpl  # noqa: F401,E501


class JsonAddAttachmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_resource': 'JsonResourceReferenceImpl',
        'file': 'JsonFileReference'
    }

    attribute_map = {
        'base_resource': 'baseResource',
        'file': 'file'
    }

    def __init__(self, base_resource=None, file=None):  # noqa: E501
        """JsonAddAttachmentRequest - a model defined in Swagger"""  # noqa: E501

        self._base_resource = None
        self._file = None
        self.discriminator = None

        self.base_resource = base_resource
        self.file = file

    @property
    def base_resource(self):
        """Gets the base_resource of this JsonAddAttachmentRequest.  # noqa: E501

        The reference to the resource new attachment should be attached to  # noqa: E501

        :return: The base_resource of this JsonAddAttachmentRequest.  # noqa: E501
        :rtype: JsonResourceReferenceImpl
        """
        return self._base_resource

    @base_resource.setter
    def base_resource(self, base_resource):
        """Sets the base_resource of this JsonAddAttachmentRequest.

        The reference to the resource new attachment should be attached to  # noqa: E501

        :param base_resource: The base_resource of this JsonAddAttachmentRequest.  # noqa: E501
        :type: JsonResourceReferenceImpl
        """
        if base_resource is None:
            raise ValueError("Invalid value for `base_resource`, must not be `None`")  # noqa: E501

        self._base_resource = base_resource

    @property
    def file(self):
        """Gets the file of this JsonAddAttachmentRequest.  # noqa: E501

        The reference to the file representing new attachment  # noqa: E501

        :return: The file of this JsonAddAttachmentRequest.  # noqa: E501
        :rtype: JsonFileReference
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this JsonAddAttachmentRequest.

        The reference to the file representing new attachment  # noqa: E501

        :param file: The file of this JsonAddAttachmentRequest.  # noqa: E501
        :type: JsonFileReference
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonAddAttachmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
