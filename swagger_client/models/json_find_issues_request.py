# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.json_issue_user_relation import JsonIssueUserRelation  # noqa: F401,E501
from swagger_client.models.json_paged_request import JsonPagedRequest  # noqa: F401,E501
from swagger_client.models.json_sort_field_find_issues_request import JsonSortFieldFindIssuesRequest  # noqa: F401,E501
from swagger_client.models.json_sort_order import JsonSortOrder  # noqa: F401,E501


class JsonFindIssuesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offset': 'float',
        'limit': 'float',
        'sort_order': 'JsonSortOrder',
        'sort_field': 'JsonSortFieldFindIssuesRequest',
        'only_open_issues': 'bool',
        'user_relation': 'JsonIssueUserRelation'
    }

    attribute_map = {
        'offset': 'offset',
        'limit': 'limit',
        'sort_order': 'sortOrder',
        'sort_field': 'sortField',
        'only_open_issues': 'onlyOpenIssues',
        'user_relation': 'userRelation'
    }

    def __init__(self, offset=None, limit=None, sort_order=None, sort_field=None, only_open_issues=None, user_relation=None):  # noqa: E501
        """JsonFindIssuesRequest - a model defined in Swagger"""  # noqa: E501

        self._offset = None
        self._limit = None
        self._sort_order = None
        self._sort_field = None
        self._only_open_issues = None
        self._user_relation = None
        self.discriminator = None

        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if sort_order is not None:
            self.sort_order = sort_order
        if sort_field is not None:
            self.sort_field = sort_field
        if only_open_issues is not None:
            self.only_open_issues = only_open_issues
        if user_relation is not None:
            self.user_relation = user_relation

    @property
    def offset(self):
        """Gets the offset of this JsonFindIssuesRequest.  # noqa: E501

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :return: The offset of this JsonFindIssuesRequest.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this JsonFindIssuesRequest.

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :param offset: The offset of this JsonFindIssuesRequest.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this JsonFindIssuesRequest.  # noqa: E501

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :return: The limit of this JsonFindIssuesRequest.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this JsonFindIssuesRequest.

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :param limit: The limit of this JsonFindIssuesRequest.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def sort_order(self):
        """Gets the sort_order of this JsonFindIssuesRequest.  # noqa: E501

        The sorting order of the results  # noqa: E501

        :return: The sort_order of this JsonFindIssuesRequest.  # noqa: E501
        :rtype: JsonSortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this JsonFindIssuesRequest.

        The sorting order of the results  # noqa: E501

        :param sort_order: The sort_order of this JsonFindIssuesRequest.  # noqa: E501
        :type: JsonSortOrder
        """

        self._sort_order = sort_order

    @property
    def sort_field(self):
        """Gets the sort_field of this JsonFindIssuesRequest.  # noqa: E501

        The field on which the results are sorted. Default is NAME  # noqa: E501

        :return: The sort_field of this JsonFindIssuesRequest.  # noqa: E501
        :rtype: JsonSortFieldFindIssuesRequest
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this JsonFindIssuesRequest.

        The field on which the results are sorted. Default is NAME  # noqa: E501

        :param sort_field: The sort_field of this JsonFindIssuesRequest.  # noqa: E501
        :type: JsonSortFieldFindIssuesRequest
        """

        self._sort_field = sort_field

    @property
    def only_open_issues(self):
        """Gets the only_open_issues of this JsonFindIssuesRequest.  # noqa: E501

        Whether only open issues should be returned  # noqa: E501

        :return: The only_open_issues of this JsonFindIssuesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._only_open_issues

    @only_open_issues.setter
    def only_open_issues(self, only_open_issues):
        """Sets the only_open_issues of this JsonFindIssuesRequest.

        Whether only open issues should be returned  # noqa: E501

        :param only_open_issues: The only_open_issues of this JsonFindIssuesRequest.  # noqa: E501
        :type: bool
        """

        self._only_open_issues = only_open_issues

    @property
    def user_relation(self):
        """Gets the user_relation of this JsonFindIssuesRequest.  # noqa: E501

        The relation of the user with the issues to be returned. By default all issues for the current user will be returned.  # noqa: E501

        :return: The user_relation of this JsonFindIssuesRequest.  # noqa: E501
        :rtype: JsonIssueUserRelation
        """
        return self._user_relation

    @user_relation.setter
    def user_relation(self, user_relation):
        """Sets the user_relation of this JsonFindIssuesRequest.

        The relation of the user with the issues to be returned. By default all issues for the current user will be returned.  # noqa: E501

        :param user_relation: The user_relation of this JsonFindIssuesRequest.  # noqa: E501
        :type: JsonIssueUserRelation
        """

        self._user_relation = user_relation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonFindIssuesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
