# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.json_business_item_type import JsonBusinessItemType  # noqa: F401,E501
from swagger_client.models.json_paged_request import JsonPagedRequest  # noqa: F401,E501
from swagger_client.models.json_sort_field_find_workflow_tasks_request import JsonSortFieldFindWorkflowTasksRequest  # noqa: F401,E501
from swagger_client.models.json_sort_order import JsonSortOrder  # noqa: F401,E501
from swagger_client.models.json_workflow_task_user_relation import JsonWorkflowTaskUserRelation  # noqa: F401,E501


class JsonFindWorkflowTasksRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offset': 'float',
        'limit': 'float',
        'business_item_id': 'str',
        'business_item_type': 'JsonBusinessItemType',
        'workflow_task_user_relation': 'JsonWorkflowTaskUserRelation',
        'business_item_name': 'str',
        'user_id': 'str',
        'create_date': 'float',
        'due_date': 'float',
        'title': 'str',
        'type': 'str',
        'sort_field': 'JsonSortFieldFindWorkflowTasksRequest',
        'sort_order': 'JsonSortOrder'
    }

    attribute_map = {
        'offset': 'offset',
        'limit': 'limit',
        'business_item_id': 'businessItemId',
        'business_item_type': 'businessItemType',
        'workflow_task_user_relation': 'workflowTaskUserRelation',
        'business_item_name': 'businessItemName',
        'user_id': 'userId',
        'create_date': 'createDate',
        'due_date': 'dueDate',
        'title': 'title',
        'type': 'type',
        'sort_field': 'sortField',
        'sort_order': 'sortOrder'
    }

    def __init__(self, offset=None, limit=None, business_item_id=None, business_item_type=None, workflow_task_user_relation=None, business_item_name=None, user_id=None, create_date=None, due_date=None, title=None, type=None, sort_field=None, sort_order=None):  # noqa: E501
        """JsonFindWorkflowTasksRequest - a model defined in Swagger"""  # noqa: E501

        self._offset = None
        self._limit = None
        self._business_item_id = None
        self._business_item_type = None
        self._workflow_task_user_relation = None
        self._business_item_name = None
        self._user_id = None
        self._create_date = None
        self._due_date = None
        self._title = None
        self._type = None
        self._sort_field = None
        self._sort_order = None
        self.discriminator = None

        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if business_item_id is not None:
            self.business_item_id = business_item_id
        if business_item_type is not None:
            self.business_item_type = business_item_type
        if workflow_task_user_relation is not None:
            self.workflow_task_user_relation = workflow_task_user_relation
        if business_item_name is not None:
            self.business_item_name = business_item_name
        if user_id is not None:
            self.user_id = user_id
        if create_date is not None:
            self.create_date = create_date
        if due_date is not None:
            self.due_date = due_date
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if sort_field is not None:
            self.sort_field = sort_field
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def offset(self):
        """Gets the offset of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :return: The offset of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this JsonFindWorkflowTasksRequest.

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :param offset: The offset of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :return: The limit of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this JsonFindWorkflowTasksRequest.

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :param limit: The limit of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def business_item_id(self):
        """Gets the business_item_id of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The <code>id</code> of the business item  # noqa: E501

        :return: The business_item_id of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._business_item_id

    @business_item_id.setter
    def business_item_id(self, business_item_id):
        """Sets the business_item_id of this JsonFindWorkflowTasksRequest.

        The <code>id</code> of the business item  # noqa: E501

        :param business_item_id: The business_item_id of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: str
        """

        self._business_item_id = business_item_id

    @property
    def business_item_type(self):
        """Gets the business_item_type of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The type of the business item  # noqa: E501

        :return: The business_item_type of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: JsonBusinessItemType
        """
        return self._business_item_type

    @business_item_type.setter
    def business_item_type(self, business_item_type):
        """Sets the business_item_type of this JsonFindWorkflowTasksRequest.

        The type of the business item  # noqa: E501

        :param business_item_type: The business_item_type of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: JsonBusinessItemType
        """

        self._business_item_type = business_item_type

    @property
    def workflow_task_user_relation(self):
        """Gets the workflow_task_user_relation of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The type of relation between user and searched tasks <p> This could be either set to search for all the tasks the user is permitted to view or just those assigned to the user.  # noqa: E501

        :return: The workflow_task_user_relation of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: JsonWorkflowTaskUserRelation
        """
        return self._workflow_task_user_relation

    @workflow_task_user_relation.setter
    def workflow_task_user_relation(self, workflow_task_user_relation):
        """Sets the workflow_task_user_relation of this JsonFindWorkflowTasksRequest.

        The type of relation between user and searched tasks <p> This could be either set to search for all the tasks the user is permitted to view or just those assigned to the user.  # noqa: E501

        :param workflow_task_user_relation: The workflow_task_user_relation of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: JsonWorkflowTaskUserRelation
        """

        self._workflow_task_user_relation = workflow_task_user_relation

    @property
    def business_item_name(self):
        """Gets the business_item_name of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The part of the name of the business item  # noqa: E501

        :return: The business_item_name of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._business_item_name

    @business_item_name.setter
    def business_item_name(self, business_item_name):
        """Sets the business_item_name of this JsonFindWorkflowTasksRequest.

        The part of the name of the business item  # noqa: E501

        :param business_item_name: The business_item_name of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: str
        """

        self._business_item_name = business_item_name

    @property
    def user_id(self):
        """Gets the user_id of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The <code>id</code> of the user for which the tasks need to be returned. If empty, the current logged in user will be used  # noqa: E501

        :return: The user_id of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JsonFindWorkflowTasksRequest.

        The <code>id</code> of the user for which the tasks need to be returned. If empty, the current logged in user will be used  # noqa: E501

        :param user_id: The user_id of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def create_date(self):
        """Gets the create_date of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The creation date of the task. It is the timestamp (in UTC time standard)  # noqa: E501

        :return: The create_date of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: float
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this JsonFindWorkflowTasksRequest.

        The creation date of the task. It is the timestamp (in UTC time standard)  # noqa: E501

        :param create_date: The create_date of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: float
        """

        self._create_date = create_date

    @property
    def due_date(self):
        """Gets the due_date of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The due date of the task. It is the timestamp (in UTC time standard)  # noqa: E501

        :return: The due_date of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: float
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this JsonFindWorkflowTasksRequest.

        The due date of the task. It is the timestamp (in UTC time standard)  # noqa: E501

        :param due_date: The due_date of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: float
        """

        self._due_date = due_date

    @property
    def title(self):
        """Gets the title of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The title/name of the task  # noqa: E501

        :return: The title of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this JsonFindWorkflowTasksRequest.

        The title/name of the task  # noqa: E501

        :param title: The title of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The task type  # noqa: E501

        :return: The type of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JsonFindWorkflowTasksRequest.

        The task type  # noqa: E501

        :param type: The type of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def sort_field(self):
        """Gets the sort_field of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The field on which the results are sorted. On due date by default. For possible values see SortField  # noqa: E501

        :return: The sort_field of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: JsonSortFieldFindWorkflowTasksRequest
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this JsonFindWorkflowTasksRequest.

        The field on which the results are sorted. On due date by default. For possible values see SortField  # noqa: E501

        :param sort_field: The sort_field of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: JsonSortFieldFindWorkflowTasksRequest
        """

        self._sort_field = sort_field

    @property
    def sort_order(self):
        """Gets the sort_order of this JsonFindWorkflowTasksRequest.  # noqa: E501

        The sorting order  # noqa: E501

        :return: The sort_order of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :rtype: JsonSortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this JsonFindWorkflowTasksRequest.

        The sorting order  # noqa: E501

        :param sort_order: The sort_order of this JsonFindWorkflowTasksRequest.  # noqa: E501
        :type: JsonSortOrder
        """

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonFindWorkflowTasksRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
