# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_resource_type import XmlNs0ResourceType  # noqa: F401,E501


class XmlNs0AddResponsibilityRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner_id': 'str',
        'resource_id': 'str',
        'resource_type': 'XmlNs0ResourceType',
        'role_id': 'str'
    }

    attribute_map = {
        'owner_id': 'ownerId',
        'resource_id': 'resourceId',
        'resource_type': 'resourceType',
        'role_id': 'roleId'
    }

    def __init__(self, owner_id=None, resource_id=None, resource_type=None, role_id=None):  # noqa: E501
        """XmlNs0AddResponsibilityRequest - a model defined in Swagger"""  # noqa: E501

        self._owner_id = None
        self._resource_id = None
        self._resource_type = None
        self._role_id = None
        self.discriminator = None

        if owner_id is not None:
            self.owner_id = owner_id
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if role_id is not None:
            self.role_id = role_id

    @property
    def owner_id(self):
        """Gets the owner_id of this XmlNs0AddResponsibilityRequest.  # noqa: E501

        The <code>id</code> of the user who the responsibility is created for  # noqa: E501

        :return: The owner_id of this XmlNs0AddResponsibilityRequest.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this XmlNs0AddResponsibilityRequest.

        The <code>id</code> of the user who the responsibility is created for  # noqa: E501

        :param owner_id: The owner_id of this XmlNs0AddResponsibilityRequest.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def resource_id(self):
        """Gets the resource_id of this XmlNs0AddResponsibilityRequest.  # noqa: E501

        The <code>id</code> of the resource which the responsibility is created for. NOTE: if null, the global responsibility is created  # noqa: E501

        :return: The resource_id of this XmlNs0AddResponsibilityRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this XmlNs0AddResponsibilityRequest.

        The <code>id</code> of the resource which the responsibility is created for. NOTE: if null, the global responsibility is created  # noqa: E501

        :param resource_id: The resource_id of this XmlNs0AddResponsibilityRequest.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this XmlNs0AddResponsibilityRequest.  # noqa: E501

        The type of the resource which the responsibility is created for, i.e. [Community, Asset, Domain]  # noqa: E501

        :return: The resource_type of this XmlNs0AddResponsibilityRequest.  # noqa: E501
        :rtype: XmlNs0ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this XmlNs0AddResponsibilityRequest.

        The type of the resource which the responsibility is created for, i.e. [Community, Asset, Domain]  # noqa: E501

        :param resource_type: The resource_type of this XmlNs0AddResponsibilityRequest.  # noqa: E501
        :type: XmlNs0ResourceType
        """

        self._resource_type = resource_type

    @property
    def role_id(self):
        """Gets the role_id of this XmlNs0AddResponsibilityRequest.  # noqa: E501

        The <code>id</code> of the role that should be assigned to user  # noqa: E501

        :return: The role_id of this XmlNs0AddResponsibilityRequest.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this XmlNs0AddResponsibilityRequest.

        The <code>id</code> of the role that should be assigned to user  # noqa: E501

        :param role_id: The role_id of this XmlNs0AddResponsibilityRequest.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0AddResponsibilityRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
