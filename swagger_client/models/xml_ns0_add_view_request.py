# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_add_or_change_view_assignment_rule_request import XmlNs0AddOrChangeViewAssignmentRuleRequest  # noqa: F401,E501
from swagger_client.models.xml_ns0_sharing_rule_request import XmlNs0SharingRuleRequest  # noqa: F401,E501
from swagger_client.models.xml_ns0_view_type import XmlNs0ViewType  # noqa: F401,E501


class XmlNs0AddViewRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_rules': 'XmlNs0AddOrChangeViewAssignmentRuleRequest',
        'config': 'str',
        'description': 'str',
        'id': 'str',
        'is_default': 'bool',
        'is_preferred': 'bool',
        'is_working_view': 'bool',
        'location': 'str',
        'name': 'str',
        'original_view_id': 'str',
        'sharing_rules': 'XmlNs0SharingRuleRequest',
        'type': 'XmlNs0ViewType'
    }

    attribute_map = {
        'assignment_rules': 'assignmentRules',
        'config': 'config',
        'description': 'description',
        'id': 'id',
        'is_default': 'isDefault',
        'is_preferred': 'isPreferred',
        'is_working_view': 'isWorkingView',
        'location': 'location',
        'name': 'name',
        'original_view_id': 'originalViewId',
        'sharing_rules': 'sharingRules',
        'type': 'type'
    }

    def __init__(self, assignment_rules=None, config=None, description=None, id=None, is_default=None, is_preferred=None, is_working_view=None, location=None, name=None, original_view_id=None, sharing_rules=None, type=None):  # noqa: E501
        """XmlNs0AddViewRequest - a model defined in Swagger"""  # noqa: E501

        self._assignment_rules = None
        self._config = None
        self._description = None
        self._id = None
        self._is_default = None
        self._is_preferred = None
        self._is_working_view = None
        self._location = None
        self._name = None
        self._original_view_id = None
        self._sharing_rules = None
        self._type = None
        self.discriminator = None

        if assignment_rules is not None:
            self.assignment_rules = assignment_rules
        if config is not None:
            self.config = config
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        if is_preferred is not None:
            self.is_preferred = is_preferred
        if is_working_view is not None:
            self.is_working_view = is_working_view
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if original_view_id is not None:
            self.original_view_id = original_view_id
        if sharing_rules is not None:
            self.sharing_rules = sharing_rules
        if type is not None:
            self.type = type

    @property
    def assignment_rules(self):
        """Gets the assignment_rules of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The assignment_rules of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: XmlNs0AddOrChangeViewAssignmentRuleRequest
        """
        return self._assignment_rules

    @assignment_rules.setter
    def assignment_rules(self, assignment_rules):
        """Sets the assignment_rules of this XmlNs0AddViewRequest.

          # noqa: E501

        :param assignment_rules: The assignment_rules of this XmlNs0AddViewRequest.  # noqa: E501
        :type: XmlNs0AddOrChangeViewAssignmentRuleRequest
        """

        self._assignment_rules = assignment_rules

    @property
    def config(self):
        """Gets the config of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The config of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this XmlNs0AddViewRequest.

          # noqa: E501

        :param config: The config of this XmlNs0AddViewRequest.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def description(self):
        """Gets the description of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The description of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XmlNs0AddViewRequest.

          # noqa: E501

        :param description: The description of this XmlNs0AddViewRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The id of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XmlNs0AddViewRequest.

          # noqa: E501

        :param id: The id of this XmlNs0AddViewRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The is_default of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this XmlNs0AddViewRequest.

          # noqa: E501

        :param is_default: The is_default of this XmlNs0AddViewRequest.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def is_preferred(self):
        """Gets the is_preferred of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The is_preferred of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_preferred

    @is_preferred.setter
    def is_preferred(self, is_preferred):
        """Sets the is_preferred of this XmlNs0AddViewRequest.

          # noqa: E501

        :param is_preferred: The is_preferred of this XmlNs0AddViewRequest.  # noqa: E501
        :type: bool
        """

        self._is_preferred = is_preferred

    @property
    def is_working_view(self):
        """Gets the is_working_view of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The is_working_view of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_working_view

    @is_working_view.setter
    def is_working_view(self, is_working_view):
        """Sets the is_working_view of this XmlNs0AddViewRequest.

          # noqa: E501

        :param is_working_view: The is_working_view of this XmlNs0AddViewRequest.  # noqa: E501
        :type: bool
        """

        self._is_working_view = is_working_view

    @property
    def location(self):
        """Gets the location of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The location of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this XmlNs0AddViewRequest.

          # noqa: E501

        :param location: The location of this XmlNs0AddViewRequest.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The name of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XmlNs0AddViewRequest.

          # noqa: E501

        :param name: The name of this XmlNs0AddViewRequest.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def original_view_id(self):
        """Gets the original_view_id of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The original_view_id of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._original_view_id

    @original_view_id.setter
    def original_view_id(self, original_view_id):
        """Sets the original_view_id of this XmlNs0AddViewRequest.

          # noqa: E501

        :param original_view_id: The original_view_id of this XmlNs0AddViewRequest.  # noqa: E501
        :type: str
        """

        self._original_view_id = original_view_id

    @property
    def sharing_rules(self):
        """Gets the sharing_rules of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The sharing_rules of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: XmlNs0SharingRuleRequest
        """
        return self._sharing_rules

    @sharing_rules.setter
    def sharing_rules(self, sharing_rules):
        """Sets the sharing_rules of this XmlNs0AddViewRequest.

          # noqa: E501

        :param sharing_rules: The sharing_rules of this XmlNs0AddViewRequest.  # noqa: E501
        :type: XmlNs0SharingRuleRequest
        """

        self._sharing_rules = sharing_rules

    @property
    def type(self):
        """Gets the type of this XmlNs0AddViewRequest.  # noqa: E501

          # noqa: E501

        :return: The type of this XmlNs0AddViewRequest.  # noqa: E501
        :rtype: XmlNs0ViewType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this XmlNs0AddViewRequest.

          # noqa: E501

        :param type: The type of this XmlNs0AddViewRequest.  # noqa: E501
        :type: XmlNs0ViewType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0AddViewRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
