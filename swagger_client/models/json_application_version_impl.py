# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JsonApplicationVersionImpl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'major': 'float',
        'minor': 'float',
        'full_version': 'str'
    }

    attribute_map = {
        'major': 'major',
        'minor': 'minor',
        'full_version': 'fullVersion'
    }

    def __init__(self, major=None, minor=None, full_version=None):  # noqa: E501
        """JsonApplicationVersionImpl - a model defined in Swagger"""  # noqa: E501

        self._major = None
        self._minor = None
        self._full_version = None
        self.discriminator = None

        if major is not None:
            self.major = major
        if minor is not None:
            self.minor = minor
        if full_version is not None:
            self.full_version = full_version

    @property
    def major(self):
        """Gets the major of this JsonApplicationVersionImpl.  # noqa: E501

        The major version number of the application version. This version number is increased with the major changes and releases of the application  # noqa: E501

        :return: The major of this JsonApplicationVersionImpl.  # noqa: E501
        :rtype: float
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this JsonApplicationVersionImpl.

        The major version number of the application version. This version number is increased with the major changes and releases of the application  # noqa: E501

        :param major: The major of this JsonApplicationVersionImpl.  # noqa: E501
        :type: float
        """

        self._major = major

    @property
    def minor(self):
        """Gets the minor of this JsonApplicationVersionImpl.  # noqa: E501

        The minor version number of the application version. This version number is increased whenever new features are added in given release  # noqa: E501

        :return: The minor of this JsonApplicationVersionImpl.  # noqa: E501
        :rtype: float
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this JsonApplicationVersionImpl.

        The minor version number of the application version. This version number is increased whenever new features are added in given release  # noqa: E501

        :param minor: The minor of this JsonApplicationVersionImpl.  # noqa: E501
        :type: float
        """

        self._minor = minor

    @property
    def full_version(self):
        """Gets the full_version of this JsonApplicationVersionImpl.  # noqa: E501

        The full version of the application release in the form of MAJOR.MINOR.PATCH(-LABEL)  # noqa: E501

        :return: The full_version of this JsonApplicationVersionImpl.  # noqa: E501
        :rtype: str
        """
        return self._full_version

    @full_version.setter
    def full_version(self, full_version):
        """Sets the full_version of this JsonApplicationVersionImpl.

        The full version of the application release in the form of MAJOR.MINOR.PATCH(-LABEL)  # noqa: E501

        :param full_version: The full_version of this JsonApplicationVersionImpl.  # noqa: E501
        :type: str
        """

        self._full_version = full_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonApplicationVersionImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
