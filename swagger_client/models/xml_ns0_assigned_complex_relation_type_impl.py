# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_assigned_characteristic_type_impl import XmlNs0AssignedCharacteristicTypeImpl  # noqa: F401,E501


class XmlNs0AssignedComplexRelationTypeImpl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'maximum_occurrences': 'float',
        'minimum_occurrences': 'float',
        'read_only': 'bool',
        'system': 'bool',
        'complex_relation_type': 'object',
        'matching_leg_types_ids': 'str'
    }

    attribute_map = {
        'id': 'id',
        'maximum_occurrences': 'maximumOccurrences',
        'minimum_occurrences': 'minimumOccurrences',
        'read_only': 'readOnly',
        'system': 'system',
        'complex_relation_type': 'complexRelationType',
        'matching_leg_types_ids': 'matchingLegTypesIds'
    }

    def __init__(self, id=None, maximum_occurrences=None, minimum_occurrences=None, read_only=None, system=None, complex_relation_type=None, matching_leg_types_ids=None):  # noqa: E501
        """XmlNs0AssignedComplexRelationTypeImpl - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._maximum_occurrences = None
        self._minimum_occurrences = None
        self._read_only = None
        self._system = None
        self._complex_relation_type = None
        self._matching_leg_types_ids = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if maximum_occurrences is not None:
            self.maximum_occurrences = maximum_occurrences
        if minimum_occurrences is not None:
            self.minimum_occurrences = minimum_occurrences
        if read_only is not None:
            self.read_only = read_only
        if system is not None:
            self.system = system
        if complex_relation_type is not None:
            self.complex_relation_type = complex_relation_type
        if matching_leg_types_ids is not None:
            self.matching_leg_types_ids = matching_leg_types_ids

    @property
    def id(self):
        """Gets the id of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501

        The <code>id</code> of the represented object (entity)  # noqa: E501

        :return: The id of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XmlNs0AssignedComplexRelationTypeImpl.

        The <code>id</code> of the represented object (entity)  # noqa: E501

        :param id: The id of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def maximum_occurrences(self):
        """Gets the maximum_occurrences of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501

        How many times at least the assigned characteristic may be added to the resource. Null means no limit  # noqa: E501

        :return: The maximum_occurrences of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :rtype: float
        """
        return self._maximum_occurrences

    @maximum_occurrences.setter
    def maximum_occurrences(self, maximum_occurrences):
        """Sets the maximum_occurrences of this XmlNs0AssignedComplexRelationTypeImpl.

        How many times at least the assigned characteristic may be added to the resource. Null means no limit  # noqa: E501

        :param maximum_occurrences: The maximum_occurrences of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :type: float
        """

        self._maximum_occurrences = maximum_occurrences

    @property
    def minimum_occurrences(self):
        """Gets the minimum_occurrences of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501

        How many times at least the assigned characteristic must be added to the resource. Zero means no restriction  # noqa: E501

        :return: The minimum_occurrences of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :rtype: float
        """
        return self._minimum_occurrences

    @minimum_occurrences.setter
    def minimum_occurrences(self, minimum_occurrences):
        """Sets the minimum_occurrences of this XmlNs0AssignedComplexRelationTypeImpl.

        How many times at least the assigned characteristic must be added to the resource. Zero means no restriction  # noqa: E501

        :param minimum_occurrences: The minimum_occurrences of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :type: float
        """

        self._minimum_occurrences = minimum_occurrences

    @property
    def read_only(self):
        """Gets the read_only of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501

        Whether the characteristic value of the assigned type can be edited by the user  # noqa: E501

        :return: The read_only of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this XmlNs0AssignedComplexRelationTypeImpl.

        Whether the characteristic value of the assigned type can be edited by the user  # noqa: E501

        :param read_only: The read_only of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def system(self):
        """Gets the system of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501

        Whether the characteristic type can be unassigned  # noqa: E501

        :return: The system of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this XmlNs0AssignedComplexRelationTypeImpl.

        Whether the characteristic type can be unassigned  # noqa: E501

        :param system: The system of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def complex_relation_type(self):
        """Gets the complex_relation_type of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501

        The complex relation type to be assigned  # noqa: E501

        :return: The complex_relation_type of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :rtype: object
        """
        return self._complex_relation_type

    @complex_relation_type.setter
    def complex_relation_type(self, complex_relation_type):
        """Sets the complex_relation_type of this XmlNs0AssignedComplexRelationTypeImpl.

        The complex relation type to be assigned  # noqa: E501

        :param complex_relation_type: The complex_relation_type of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :type: object
        """

        self._complex_relation_type = complex_relation_type

    @property
    def matching_leg_types_ids(self):
        """Gets the matching_leg_types_ids of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501

        The list of <code>id</code>s that should match the legs of the complex relation  # noqa: E501

        :return: The matching_leg_types_ids of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :rtype: str
        """
        return self._matching_leg_types_ids

    @matching_leg_types_ids.setter
    def matching_leg_types_ids(self, matching_leg_types_ids):
        """Sets the matching_leg_types_ids of this XmlNs0AssignedComplexRelationTypeImpl.

        The list of <code>id</code>s that should match the legs of the complex relation  # noqa: E501

        :param matching_leg_types_ids: The matching_leg_types_ids of this XmlNs0AssignedComplexRelationTypeImpl.  # noqa: E501
        :type: str
        """

        self._matching_leg_types_ids = matching_leg_types_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0AssignedComplexRelationTypeImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
