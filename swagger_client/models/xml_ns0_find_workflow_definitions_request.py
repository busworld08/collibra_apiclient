# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_paged_request import XmlNs0PagedRequest  # noqa: F401,E501


class XmlNs0FindWorkflowDefinitionsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit': 'float',
        'offset': 'float',
        'asset_ids': 'str',
        'community_ids': 'str',
        'domain_ids': 'str',
        'enabled': 'bool',
        '_global': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'limit': 'limit',
        'offset': 'offset',
        'asset_ids': 'assetIds',
        'community_ids': 'communityIds',
        'domain_ids': 'domainIds',
        'enabled': 'enabled',
        '_global': 'global',
        'name': 'name'
    }

    def __init__(self, limit=None, offset=None, asset_ids=None, community_ids=None, domain_ids=None, enabled=None, _global=None, name=None):  # noqa: E501
        """XmlNs0FindWorkflowDefinitionsRequest - a model defined in Swagger"""  # noqa: E501

        self._limit = None
        self._offset = None
        self._asset_ids = None
        self._community_ids = None
        self._domain_ids = None
        self._enabled = None
        self.__global = None
        self._name = None
        self.discriminator = None

        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if asset_ids is not None:
            self.asset_ids = asset_ids
        if community_ids is not None:
            self.community_ids = community_ids
        if domain_ids is not None:
            self.domain_ids = domain_ids
        if enabled is not None:
            self.enabled = enabled
        if _global is not None:
            self._global = _global
        if name is not None:
            self.name = name

    @property
    def limit(self):
        """Gets the limit of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :return: The limit of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this XmlNs0FindWorkflowDefinitionsRequest.

        The maximum number of results to retrieve. If not set (value = <tt>0</tt>), the default limit will be used  # noqa: E501

        :param limit: The limit of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :return: The offset of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this XmlNs0FindWorkflowDefinitionsRequest.

        The first result to retrieve. If not set (value = <tt>0</tt>), results will be retrieved starting from row <tt>0</tt>  # noqa: E501

        :param offset: The offset of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def asset_ids(self):
        """Gets the asset_ids of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501

        The list of the <code>id</code>s of business items (assets) for which the workflow definitions should be found  # noqa: E501

        :return: The asset_ids of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """Sets the asset_ids of this XmlNs0FindWorkflowDefinitionsRequest.

        The list of the <code>id</code>s of business items (assets) for which the workflow definitions should be found  # noqa: E501

        :param asset_ids: The asset_ids of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :type: str
        """

        self._asset_ids = asset_ids

    @property
    def community_ids(self):
        """Gets the community_ids of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501

        The list of the <code>id</code>s of business items (communities) for which the workflow definitions should be found  # noqa: E501

        :return: The community_ids of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._community_ids

    @community_ids.setter
    def community_ids(self, community_ids):
        """Sets the community_ids of this XmlNs0FindWorkflowDefinitionsRequest.

        The list of the <code>id</code>s of business items (communities) for which the workflow definitions should be found  # noqa: E501

        :param community_ids: The community_ids of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :type: str
        """

        self._community_ids = community_ids

    @property
    def domain_ids(self):
        """Gets the domain_ids of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501

        The list of the <code>id</code>s of business items (domains) for which the workflow definitions should be found  # noqa: E501

        :return: The domain_ids of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain_ids

    @domain_ids.setter
    def domain_ids(self, domain_ids):
        """Sets the domain_ids of this XmlNs0FindWorkflowDefinitionsRequest.

        The list of the <code>id</code>s of business items (domains) for which the workflow definitions should be found  # noqa: E501

        :param domain_ids: The domain_ids of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :type: str
        """

        self._domain_ids = domain_ids

    @property
    def enabled(self):
        """Gets the enabled of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501

        Whether the found workflow definitions should be enabled  # noqa: E501

        :return: The enabled of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this XmlNs0FindWorkflowDefinitionsRequest.

        Whether the found workflow definitions should be enabled  # noqa: E501

        :param enabled: The enabled of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def _global(self):
        """Gets the _global of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501

        Whether the found workflow definitions should be global  # noqa: E501

        :return: The _global of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this XmlNs0FindWorkflowDefinitionsRequest.

        Whether the found workflow definitions should be global  # noqa: E501

        :param _global: The _global of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    @property
    def name(self):
        """Gets the name of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501

        The name (could be partial) of the workflow definition to search for  # noqa: E501

        :return: The name of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XmlNs0FindWorkflowDefinitionsRequest.

        The name (could be partial) of the workflow definition to search for  # noqa: E501

        :param name: The name of this XmlNs0FindWorkflowDefinitionsRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0FindWorkflowDefinitionsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
