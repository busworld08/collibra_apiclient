# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.xml_ns0_complex_relation_leg_request import XmlNs0ComplexRelationLegRequest  # noqa: F401,E501


class XmlNs0AddComplexRelationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'object',
        'complex_relation_type_id': 'str',
        'legs': 'XmlNs0ComplexRelationLegRequest',
        'relations': 'object'
    }

    attribute_map = {
        'attributes': 'attributes',
        'complex_relation_type_id': 'complexRelationTypeId',
        'legs': 'legs',
        'relations': 'relations'
    }

    def __init__(self, attributes=None, complex_relation_type_id=None, legs=None, relations=None):  # noqa: E501
        """XmlNs0AddComplexRelationRequest - a model defined in Swagger"""  # noqa: E501

        self._attributes = None
        self._complex_relation_type_id = None
        self._legs = None
        self._relations = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        if complex_relation_type_id is not None:
            self.complex_relation_type_id = complex_relation_type_id
        if legs is not None:
            self.legs = legs
        if relations is not None:
            self.relations = relations

    @property
    def attributes(self):
        """Gets the attributes of this XmlNs0AddComplexRelationRequest.  # noqa: E501

        The attributes that the new complex relation should contain  # noqa: E501

        :return: The attributes of this XmlNs0AddComplexRelationRequest.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this XmlNs0AddComplexRelationRequest.

        The attributes that the new complex relation should contain  # noqa: E501

        :param attributes: The attributes of this XmlNs0AddComplexRelationRequest.  # noqa: E501
        :type: object
        """

        self._attributes = attributes

    @property
    def complex_relation_type_id(self):
        """Gets the complex_relation_type_id of this XmlNs0AddComplexRelationRequest.  # noqa: E501

        The <code>id</code> of the type of the complex relation  # noqa: E501

        :return: The complex_relation_type_id of this XmlNs0AddComplexRelationRequest.  # noqa: E501
        :rtype: str
        """
        return self._complex_relation_type_id

    @complex_relation_type_id.setter
    def complex_relation_type_id(self, complex_relation_type_id):
        """Sets the complex_relation_type_id of this XmlNs0AddComplexRelationRequest.

        The <code>id</code> of the type of the complex relation  # noqa: E501

        :param complex_relation_type_id: The complex_relation_type_id of this XmlNs0AddComplexRelationRequest.  # noqa: E501
        :type: str
        """

        self._complex_relation_type_id = complex_relation_type_id

    @property
    def legs(self):
        """Gets the legs of this XmlNs0AddComplexRelationRequest.  # noqa: E501

        The list of legs that the new complex relation should contain  # noqa: E501

        :return: The legs of this XmlNs0AddComplexRelationRequest.  # noqa: E501
        :rtype: XmlNs0ComplexRelationLegRequest
        """
        return self._legs

    @legs.setter
    def legs(self, legs):
        """Sets the legs of this XmlNs0AddComplexRelationRequest.

        The list of legs that the new complex relation should contain  # noqa: E501

        :param legs: The legs of this XmlNs0AddComplexRelationRequest.  # noqa: E501
        :type: XmlNs0ComplexRelationLegRequest
        """

        self._legs = legs

    @property
    def relations(self):
        """Gets the relations of this XmlNs0AddComplexRelationRequest.  # noqa: E501

        The relations that the new complex relation should contain  # noqa: E501

        :return: The relations of this XmlNs0AddComplexRelationRequest.  # noqa: E501
        :rtype: object
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this XmlNs0AddComplexRelationRequest.

        The relations that the new complex relation should contain  # noqa: E501

        :param relations: The relations of this XmlNs0AddComplexRelationRequest.  # noqa: E501
        :type: object
        """

        self._relations = relations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlNs0AddComplexRelationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
