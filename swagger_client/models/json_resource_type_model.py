# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JsonResourceTypeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CO = "CO"
    VC = "VC"
    RP = "RP"
    TE = "TE"
    AT = "AT"
    SA = "SA"
    VA = "VA"
    MA = "MA"
    DT = "DT"
    DA = "DA"
    BO = "BO"
    NA = "NA"
    SCA = "SCA"
    AR = "AR"
    CM = "CM"
    GR = "GR"
    UR = "UR"
    AD = "AD"
    EM = "EM"
    IM = "IM"
    PN = "PN"
    WS = "WS"
    RE = "RE"
    BF = "BF"
    RL = "RL"
    ME = "ME"
    AM = "AM"
    VI = "VI"
    VR = "VR"
    JO = "JO"
    ST = "ST"
    TY = "TY"
    CT = "CT"
    VT = "VT"
    DQR = "DQR"
    DQM = "DQM"
    WD = "WD"
    WI = "WI"
    ARR = "ARR"
    SS = "SS"
    SSC = "SSC"
    MP = "MP"
    RT = "RT"
    RTE = "RTE"
    CRT = "CRT"
    CR = "CR"
    CRT_LEG = "CRT_LEG"
    CR_AT = "CR_AT"
    NOTIFICATION = "NOTIFICATION"
    TASK_INFO = "TASK_INFO"
    VAL_RULE = "VAL_RULE"
    VIEW_RIGHT = "VIEW_RIGHT"
    ASG = "ASG"
    PROBLEM_DEFINITION = "PROBLEM_DEFINITION"
    RECOMMENDER_EVENT = "RECOMMENDER_EVENT"
    FEEDBACK_EVENT = "FEEDBACK_EVENT"
    MATCHING_EVENT = "MATCHING_EVENT"
    TE_VAL_RES = "TE_VAL_RES"
    JDBC_DRIVER = "JDBC_DRIVER"
    JDBC_DRIVER_FILE = "JDBC_DRIVER_FILE"
    JDBC_INGESTION_PROPERTIES = "JDBC_INGESTION_PROPERTIES"
    CSV_INGESTION_PROPERTIES = "CSV_INGESTION_PROPERTIES"
    EXCEL_INGESTION_PROPERTIES = "EXCEL_INGESTION_PROPERTIES"
    TAG = "TAG"
    BASE_DATA_TYPE = "BASE_DATA_TYPE"
    ADVANCED_DATA_TYPE = "ADVANCED_DATA_TYPE"
    FOREIGN_CREDENTIAL = "FOREIGN_CREDENTIAL"
    DIAGRAM_PICTURE = "DIAGRAM_PICTURE"
    DIAGRAM_PICTURE_SHARING_RULE = "DIAGRAM_PICTURE_SHARING_RULE"
    SCOPE = "SCOPE"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """JsonResourceTypeModel - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonResourceTypeModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
