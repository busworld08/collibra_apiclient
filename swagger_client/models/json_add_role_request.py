# coding: utf-8

"""
    \"Data Governance Center: REST API v2\"

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JsonAddRoleRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        '_global': 'bool',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        '_global': 'global',
        'description': 'description'
    }

    def __init__(self, id=None, name=None, _global=None, description=None):  # noqa: E501
        """JsonAddRoleRequest - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self.__global = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if _global is not None:
            self._global = _global
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this JsonAddRoleRequest.  # noqa: E501

        The <code>id</code> of the new role. Should be unique within all roles <p> It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix  # noqa: E501

        :return: The id of this JsonAddRoleRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JsonAddRoleRequest.

        The <code>id</code> of the new role. Should be unique within all roles <p> It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix  # noqa: E501

        :param id: The id of this JsonAddRoleRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JsonAddRoleRequest.  # noqa: E501

        The name of the new role. Should be unique within all roles  # noqa: E501

        :return: The name of this JsonAddRoleRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JsonAddRoleRequest.

        The name of the new role. Should be unique within all roles  # noqa: E501

        :param name: The name of this JsonAddRoleRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def _global(self):
        """Gets the _global of this JsonAddRoleRequest.  # noqa: E501

        Whether the role should be a global or resource role  # noqa: E501

        :return: The _global of this JsonAddRoleRequest.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this JsonAddRoleRequest.

        Whether the role should be a global or resource role  # noqa: E501

        :param _global: The _global of this JsonAddRoleRequest.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    @property
    def description(self):
        """Gets the description of this JsonAddRoleRequest.  # noqa: E501

        The description of the role  # noqa: E501

        :return: The description of this JsonAddRoleRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JsonAddRoleRequest.

        The description of the role  # noqa: E501

        :param description: The description of this JsonAddRoleRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonAddRoleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
